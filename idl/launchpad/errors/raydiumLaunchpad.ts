/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS } from '../programs';

/** NotApproved: Not approved */
export const RAYDIUM_LAUNCHPAD_ERROR__NOT_APPROVED = 0x1770; // 6000
/** InvalidOwner: Input account owner is not the program address */
export const RAYDIUM_LAUNCHPAD_ERROR__INVALID_OWNER = 0x1771; // 6001
/** InvalidInput: InvalidInput */
export const RAYDIUM_LAUNCHPAD_ERROR__INVALID_INPUT = 0x1772; // 6002
/** InputNotMatchCurveConfig: The input params are not match with curve type in config */
export const RAYDIUM_LAUNCHPAD_ERROR__INPUT_NOT_MATCH_CURVE_CONFIG = 0x1773; // 6003
/** ExceededSlippage: Exceeds desired slippage limit */
export const RAYDIUM_LAUNCHPAD_ERROR__EXCEEDED_SLIPPAGE = 0x1774; // 6004
/** PoolFunding: Pool funding */
export const RAYDIUM_LAUNCHPAD_ERROR__POOL_FUNDING = 0x1775; // 6005
/** PoolMigrated: Pool migrated */
export const RAYDIUM_LAUNCHPAD_ERROR__POOL_MIGRATED = 0x1776; // 6006
/** MigrateTypeNotMatch: Migrate type not match */
export const RAYDIUM_LAUNCHPAD_ERROR__MIGRATE_TYPE_NOT_MATCH = 0x1777; // 6007
/** MathOverflow: Math overflow */
export const RAYDIUM_LAUNCHPAD_ERROR__MATH_OVERFLOW = 0x1778; // 6008
/** NoAssetsToCollect: No assets to collect */
export const RAYDIUM_LAUNCHPAD_ERROR__NO_ASSETS_TO_COLLECT = 0x1779; // 6009
/** VestingRatioTooHigh: Vesting ratio too high */
export const RAYDIUM_LAUNCHPAD_ERROR__VESTING_RATIO_TOO_HIGH = 0x177a; // 6010
/** VestingSettingEnded: Vesting setting ended */
export const RAYDIUM_LAUNCHPAD_ERROR__VESTING_SETTING_ENDED = 0x177b; // 6011
/** VestingNotStarted: Vesting not started */
export const RAYDIUM_LAUNCHPAD_ERROR__VESTING_NOT_STARTED = 0x177c; // 6012
/** NoVestingSchedule: No vesting schedule */
export const RAYDIUM_LAUNCHPAD_ERROR__NO_VESTING_SCHEDULE = 0x177d; // 6013
/** InvalidPlatformInfo: The platform info input is invalid */
export const RAYDIUM_LAUNCHPAD_ERROR__INVALID_PLATFORM_INFO = 0x177e; // 6014
/** PoolNotMigrated: Pool not migrated */
export const RAYDIUM_LAUNCHPAD_ERROR__POOL_NOT_MIGRATED = 0x177f; // 6015

export type RaydiumLaunchpadError =
  | typeof RAYDIUM_LAUNCHPAD_ERROR__EXCEEDED_SLIPPAGE
  | typeof RAYDIUM_LAUNCHPAD_ERROR__INPUT_NOT_MATCH_CURVE_CONFIG
  | typeof RAYDIUM_LAUNCHPAD_ERROR__INVALID_INPUT
  | typeof RAYDIUM_LAUNCHPAD_ERROR__INVALID_OWNER
  | typeof RAYDIUM_LAUNCHPAD_ERROR__INVALID_PLATFORM_INFO
  | typeof RAYDIUM_LAUNCHPAD_ERROR__MATH_OVERFLOW
  | typeof RAYDIUM_LAUNCHPAD_ERROR__MIGRATE_TYPE_NOT_MATCH
  | typeof RAYDIUM_LAUNCHPAD_ERROR__NO_ASSETS_TO_COLLECT
  | typeof RAYDIUM_LAUNCHPAD_ERROR__NOT_APPROVED
  | typeof RAYDIUM_LAUNCHPAD_ERROR__NO_VESTING_SCHEDULE
  | typeof RAYDIUM_LAUNCHPAD_ERROR__POOL_FUNDING
  | typeof RAYDIUM_LAUNCHPAD_ERROR__POOL_MIGRATED
  | typeof RAYDIUM_LAUNCHPAD_ERROR__POOL_NOT_MIGRATED
  | typeof RAYDIUM_LAUNCHPAD_ERROR__VESTING_NOT_STARTED
  | typeof RAYDIUM_LAUNCHPAD_ERROR__VESTING_RATIO_TOO_HIGH
  | typeof RAYDIUM_LAUNCHPAD_ERROR__VESTING_SETTING_ENDED;

let raydiumLaunchpadErrorMessages:
  | Record<RaydiumLaunchpadError, string>
  | undefined;
if (process.env.NODE_ENV !== 'production') {
  raydiumLaunchpadErrorMessages = {
    [RAYDIUM_LAUNCHPAD_ERROR__EXCEEDED_SLIPPAGE]: `Exceeds desired slippage limit`,
    [RAYDIUM_LAUNCHPAD_ERROR__INPUT_NOT_MATCH_CURVE_CONFIG]: `The input params are not match with curve type in config`,
    [RAYDIUM_LAUNCHPAD_ERROR__INVALID_INPUT]: `InvalidInput`,
    [RAYDIUM_LAUNCHPAD_ERROR__INVALID_OWNER]: `Input account owner is not the program address`,
    [RAYDIUM_LAUNCHPAD_ERROR__INVALID_PLATFORM_INFO]: `The platform info input is invalid`,
    [RAYDIUM_LAUNCHPAD_ERROR__MATH_OVERFLOW]: `Math overflow`,
    [RAYDIUM_LAUNCHPAD_ERROR__MIGRATE_TYPE_NOT_MATCH]: `Migrate type not match`,
    [RAYDIUM_LAUNCHPAD_ERROR__NO_ASSETS_TO_COLLECT]: `No assets to collect`,
    [RAYDIUM_LAUNCHPAD_ERROR__NOT_APPROVED]: `Not approved`,
    [RAYDIUM_LAUNCHPAD_ERROR__NO_VESTING_SCHEDULE]: `No vesting schedule`,
    [RAYDIUM_LAUNCHPAD_ERROR__POOL_FUNDING]: `Pool funding`,
    [RAYDIUM_LAUNCHPAD_ERROR__POOL_MIGRATED]: `Pool migrated`,
    [RAYDIUM_LAUNCHPAD_ERROR__POOL_NOT_MIGRATED]: `Pool not migrated`,
    [RAYDIUM_LAUNCHPAD_ERROR__VESTING_NOT_STARTED]: `Vesting not started`,
    [RAYDIUM_LAUNCHPAD_ERROR__VESTING_RATIO_TOO_HIGH]: `Vesting ratio too high`,
    [RAYDIUM_LAUNCHPAD_ERROR__VESTING_SETTING_ENDED]: `Vesting setting ended`,
  };
}

export function getRaydiumLaunchpadErrorMessage(
  code: RaydiumLaunchpadError
): string {
  if (process.env.NODE_ENV !== 'production') {
    return (
      raydiumLaunchpadErrorMessages as Record<RaydiumLaunchpadError, string>
    )[code];
  }

  return 'Error message not available in production bundles.';
}

export function isRaydiumLaunchpadError<
  TProgramErrorCode extends RaydiumLaunchpadError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
    code
  );
}
