/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
} from '@solana/kit';

/**
 * Represents the parameters for initializing a platform config account(Only support MigrateType::CPSWAP)
 * # Fields
 * * `platform_scale` - Scale of the platform liquidity quantity rights will be converted into NFT
 * * `creator_scale` - Scale of the token creator liquidity quantity rights will be converted into NFT
 * * `burn_scale` - Scale of liquidity directly to burn
 *
 * * platform_scale + creator_scale + burn_scale = RATE_DENOMINATOR_VALUE
 */

export type MigrateNftInfo = {
  platformScale: bigint;
  creatorScale: bigint;
  burnScale: bigint;
};

export type MigrateNftInfoArgs = {
  platformScale: number | bigint;
  creatorScale: number | bigint;
  burnScale: number | bigint;
};

export function getMigrateNftInfoEncoder(): FixedSizeEncoder<MigrateNftInfoArgs> {
  return getStructEncoder([
    ['platformScale', getU64Encoder()],
    ['creatorScale', getU64Encoder()],
    ['burnScale', getU64Encoder()],
  ]);
}

export function getMigrateNftInfoDecoder(): FixedSizeDecoder<MigrateNftInfo> {
  return getStructDecoder([
    ['platformScale', getU64Decoder()],
    ['creatorScale', getU64Decoder()],
    ['burnScale', getU64Decoder()],
  ]);
}

export function getMigrateNftInfoCodec(): FixedSizeCodec<
  MigrateNftInfoArgs,
  MigrateNftInfo
> {
  return combineCodec(getMigrateNftInfoEncoder(), getMigrateNftInfoDecoder());
}
