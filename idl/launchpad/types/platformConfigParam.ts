/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type GetDiscriminatedUnionVariant,
  type GetDiscriminatedUnionVariantContent,
} from '@solana/kit';
import {
  getMigrateNftInfoDecoder,
  getMigrateNftInfoEncoder,
  type MigrateNftInfo,
  type MigrateNftInfoArgs,
} from '.';

export type PlatformConfigParam =
  | { __kind: 'FeeWallet'; fields: readonly [Address] }
  | { __kind: 'NFTWallet'; fields: readonly [Address] }
  | { __kind: 'MigrateNftInfo'; fields: readonly [MigrateNftInfo] }
  | { __kind: 'FeeRate'; fields: readonly [bigint] }
  | { __kind: 'Name'; fields: readonly [string] }
  | { __kind: 'Web'; fields: readonly [string] }
  | { __kind: 'Img'; fields: readonly [string] };

export type PlatformConfigParamArgs =
  | { __kind: 'FeeWallet'; fields: readonly [Address] }
  | { __kind: 'NFTWallet'; fields: readonly [Address] }
  | { __kind: 'MigrateNftInfo'; fields: readonly [MigrateNftInfoArgs] }
  | { __kind: 'FeeRate'; fields: readonly [number | bigint] }
  | { __kind: 'Name'; fields: readonly [string] }
  | { __kind: 'Web'; fields: readonly [string] }
  | { __kind: 'Img'; fields: readonly [string] };

export function getPlatformConfigParamEncoder(): Encoder<PlatformConfigParamArgs> {
  return getDiscriminatedUnionEncoder([
    [
      'FeeWallet',
      getStructEncoder([['fields', getTupleEncoder([getAddressEncoder()])]]),
    ],
    [
      'NFTWallet',
      getStructEncoder([['fields', getTupleEncoder([getAddressEncoder()])]]),
    ],
    [
      'MigrateNftInfo',
      getStructEncoder([
        ['fields', getTupleEncoder([getMigrateNftInfoEncoder()])],
      ]),
    ],
    [
      'FeeRate',
      getStructEncoder([['fields', getTupleEncoder([getU64Encoder()])]]),
    ],
    [
      'Name',
      getStructEncoder([
        [
          'fields',
          getTupleEncoder([
            addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
          ]),
        ],
      ]),
    ],
    [
      'Web',
      getStructEncoder([
        [
          'fields',
          getTupleEncoder([
            addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
          ]),
        ],
      ]),
    ],
    [
      'Img',
      getStructEncoder([
        [
          'fields',
          getTupleEncoder([
            addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
          ]),
        ],
      ]),
    ],
  ]);
}

export function getPlatformConfigParamDecoder(): Decoder<PlatformConfigParam> {
  return getDiscriminatedUnionDecoder([
    [
      'FeeWallet',
      getStructDecoder([['fields', getTupleDecoder([getAddressDecoder()])]]),
    ],
    [
      'NFTWallet',
      getStructDecoder([['fields', getTupleDecoder([getAddressDecoder()])]]),
    ],
    [
      'MigrateNftInfo',
      getStructDecoder([
        ['fields', getTupleDecoder([getMigrateNftInfoDecoder()])],
      ]),
    ],
    [
      'FeeRate',
      getStructDecoder([['fields', getTupleDecoder([getU64Decoder()])]]),
    ],
    [
      'Name',
      getStructDecoder([
        [
          'fields',
          getTupleDecoder([
            addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
          ]),
        ],
      ]),
    ],
    [
      'Web',
      getStructDecoder([
        [
          'fields',
          getTupleDecoder([
            addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
          ]),
        ],
      ]),
    ],
    [
      'Img',
      getStructDecoder([
        [
          'fields',
          getTupleDecoder([
            addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
          ]),
        ],
      ]),
    ],
  ]);
}

export function getPlatformConfigParamCodec(): Codec<
  PlatformConfigParamArgs,
  PlatformConfigParam
> {
  return combineCodec(
    getPlatformConfigParamEncoder(),
    getPlatformConfigParamDecoder()
  );
}

// Data Enum Helpers.
export function platformConfigParam(
  kind: 'FeeWallet',
  data: GetDiscriminatedUnionVariantContent<
    PlatformConfigParamArgs,
    '__kind',
    'FeeWallet'
  >['fields']
): GetDiscriminatedUnionVariant<PlatformConfigParamArgs, '__kind', 'FeeWallet'>;
export function platformConfigParam(
  kind: 'NFTWallet',
  data: GetDiscriminatedUnionVariantContent<
    PlatformConfigParamArgs,
    '__kind',
    'NFTWallet'
  >['fields']
): GetDiscriminatedUnionVariant<PlatformConfigParamArgs, '__kind', 'NFTWallet'>;
export function platformConfigParam(
  kind: 'MigrateNftInfo',
  data: GetDiscriminatedUnionVariantContent<
    PlatformConfigParamArgs,
    '__kind',
    'MigrateNftInfo'
  >['fields']
): GetDiscriminatedUnionVariant<
  PlatformConfigParamArgs,
  '__kind',
  'MigrateNftInfo'
>;
export function platformConfigParam(
  kind: 'FeeRate',
  data: GetDiscriminatedUnionVariantContent<
    PlatformConfigParamArgs,
    '__kind',
    'FeeRate'
  >['fields']
): GetDiscriminatedUnionVariant<PlatformConfigParamArgs, '__kind', 'FeeRate'>;
export function platformConfigParam(
  kind: 'Name',
  data: GetDiscriminatedUnionVariantContent<
    PlatformConfigParamArgs,
    '__kind',
    'Name'
  >['fields']
): GetDiscriminatedUnionVariant<PlatformConfigParamArgs, '__kind', 'Name'>;
export function platformConfigParam(
  kind: 'Web',
  data: GetDiscriminatedUnionVariantContent<
    PlatformConfigParamArgs,
    '__kind',
    'Web'
  >['fields']
): GetDiscriminatedUnionVariant<PlatformConfigParamArgs, '__kind', 'Web'>;
export function platformConfigParam(
  kind: 'Img',
  data: GetDiscriminatedUnionVariantContent<
    PlatformConfigParamArgs,
    '__kind',
    'Img'
  >['fields']
): GetDiscriminatedUnionVariant<PlatformConfigParamArgs, '__kind', 'Img'>;
export function platformConfigParam<
  K extends PlatformConfigParamArgs['__kind'],
  Data,
>(kind: K, data?: Data) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isPlatformConfigParam<K extends PlatformConfigParam['__kind']>(
  kind: K,
  value: PlatformConfigParam
): value is PlatformConfigParam & { __kind: K } {
  return value.__kind === kind;
}
