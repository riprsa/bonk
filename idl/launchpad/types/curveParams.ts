/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type GetDiscriminatedUnionVariant,
  type GetDiscriminatedUnionVariantContent,
} from '@solana/kit';
import {
  getConstantCurveDecoder,
  getConstantCurveEncoder,
  getFixedCurveDecoder,
  getFixedCurveEncoder,
  getLinearCurveDecoder,
  getLinearCurveEncoder,
  type ConstantCurve,
  type ConstantCurveArgs,
  type FixedCurve,
  type FixedCurveArgs,
  type LinearCurve,
  type LinearCurveArgs,
} from '.';

export type CurveParams =
  | { __kind: 'Constant'; data: ConstantCurve }
  | { __kind: 'Fixed'; data: FixedCurve }
  | { __kind: 'Linear'; data: LinearCurve };

export type CurveParamsArgs =
  | { __kind: 'Constant'; data: ConstantCurveArgs }
  | { __kind: 'Fixed'; data: FixedCurveArgs }
  | { __kind: 'Linear'; data: LinearCurveArgs };

export function getCurveParamsEncoder(): Encoder<CurveParamsArgs> {
  return getDiscriminatedUnionEncoder([
    ['Constant', getStructEncoder([['data', getConstantCurveEncoder()]])],
    ['Fixed', getStructEncoder([['data', getFixedCurveEncoder()]])],
    ['Linear', getStructEncoder([['data', getLinearCurveEncoder()]])],
  ]);
}

export function getCurveParamsDecoder(): Decoder<CurveParams> {
  return getDiscriminatedUnionDecoder([
    ['Constant', getStructDecoder([['data', getConstantCurveDecoder()]])],
    ['Fixed', getStructDecoder([['data', getFixedCurveDecoder()]])],
    ['Linear', getStructDecoder([['data', getLinearCurveDecoder()]])],
  ]);
}

export function getCurveParamsCodec(): Codec<CurveParamsArgs, CurveParams> {
  return combineCodec(getCurveParamsEncoder(), getCurveParamsDecoder());
}

// Data Enum Helpers.
export function curveParams(
  kind: 'Constant',
  data: GetDiscriminatedUnionVariantContent<
    CurveParamsArgs,
    '__kind',
    'Constant'
  >
): GetDiscriminatedUnionVariant<CurveParamsArgs, '__kind', 'Constant'>;
export function curveParams(
  kind: 'Fixed',
  data: GetDiscriminatedUnionVariantContent<CurveParamsArgs, '__kind', 'Fixed'>
): GetDiscriminatedUnionVariant<CurveParamsArgs, '__kind', 'Fixed'>;
export function curveParams(
  kind: 'Linear',
  data: GetDiscriminatedUnionVariantContent<CurveParamsArgs, '__kind', 'Linear'>
): GetDiscriminatedUnionVariant<CurveParamsArgs, '__kind', 'Linear'>;
export function curveParams<K extends CurveParamsArgs['__kind'], Data>(
  kind: K,
  data?: Data
) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isCurveParams<K extends CurveParams['__kind']>(
  kind: K,
  value: CurveParams
): value is CurveParams & { __kind: K } {
  return value.__kind === kind;
}
