/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const GLOBAL_CONFIG_DISCRIMINATOR = new Uint8Array([
  149, 8, 156, 202, 160, 252, 176, 217,
]);

export function getGlobalConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    GLOBAL_CONFIG_DISCRIMINATOR
  );
}

export type GlobalConfig = {
  discriminator: ReadonlyUint8Array;
  /** Account update epoch */
  epoch: bigint;
  /**
   * 0: Constant Product Curve
   * 1: Fixed Price Curve
   * 2: Linear Price Curve
   */
  curveType: number;
  /** Config index */
  index: number;
  /** The fee of migrate to amm */
  migrateFee: bigint;
  /** The trade fee rate, denominated in hundredths of a bip (10^-6) */
  tradeFeeRate: bigint;
  /** The maximum share fee rate, denominated in hundredths of a bip (10^-6) */
  maxShareFeeRate: bigint;
  /** The minimum base supply, the value without decimals */
  minBaseSupply: bigint;
  /** The maximum lock rate, denominated in hundredths of a bip (10^-6) */
  maxLockRate: bigint;
  /** The minimum base sell rate, denominated in hundredths of a bip (10^-6) */
  minBaseSellRate: bigint;
  /** The minimum base migrate rate, denominated in hundredths of a bip (10^-6) */
  minBaseMigrateRate: bigint;
  /** The minimum quote fund raising, the value with decimals */
  minQuoteFundRaising: bigint;
  /** Mint information for quote token */
  quoteMint: Address;
  /** Protocol Fee owner */
  protocolFeeOwner: Address;
  /** Migrate Fee owner */
  migrateFeeOwner: Address;
  /** Migrate to amm control wallet */
  migrateToAmmWallet: Address;
  /** Migrate to cpswap wallet */
  migrateToCpswapWallet: Address;
  /** padding for future updates */
  padding: Array<bigint>;
};

export type GlobalConfigArgs = {
  /** Account update epoch */
  epoch: number | bigint;
  /**
   * 0: Constant Product Curve
   * 1: Fixed Price Curve
   * 2: Linear Price Curve
   */
  curveType: number;
  /** Config index */
  index: number;
  /** The fee of migrate to amm */
  migrateFee: number | bigint;
  /** The trade fee rate, denominated in hundredths of a bip (10^-6) */
  tradeFeeRate: number | bigint;
  /** The maximum share fee rate, denominated in hundredths of a bip (10^-6) */
  maxShareFeeRate: number | bigint;
  /** The minimum base supply, the value without decimals */
  minBaseSupply: number | bigint;
  /** The maximum lock rate, denominated in hundredths of a bip (10^-6) */
  maxLockRate: number | bigint;
  /** The minimum base sell rate, denominated in hundredths of a bip (10^-6) */
  minBaseSellRate: number | bigint;
  /** The minimum base migrate rate, denominated in hundredths of a bip (10^-6) */
  minBaseMigrateRate: number | bigint;
  /** The minimum quote fund raising, the value with decimals */
  minQuoteFundRaising: number | bigint;
  /** Mint information for quote token */
  quoteMint: Address;
  /** Protocol Fee owner */
  protocolFeeOwner: Address;
  /** Migrate Fee owner */
  migrateFeeOwner: Address;
  /** Migrate to amm control wallet */
  migrateToAmmWallet: Address;
  /** Migrate to cpswap wallet */
  migrateToCpswapWallet: Address;
  /** padding for future updates */
  padding: Array<number | bigint>;
};

export function getGlobalConfigEncoder(): FixedSizeEncoder<GlobalConfigArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['epoch', getU64Encoder()],
      ['curveType', getU8Encoder()],
      ['index', getU16Encoder()],
      ['migrateFee', getU64Encoder()],
      ['tradeFeeRate', getU64Encoder()],
      ['maxShareFeeRate', getU64Encoder()],
      ['minBaseSupply', getU64Encoder()],
      ['maxLockRate', getU64Encoder()],
      ['minBaseSellRate', getU64Encoder()],
      ['minBaseMigrateRate', getU64Encoder()],
      ['minQuoteFundRaising', getU64Encoder()],
      ['quoteMint', getAddressEncoder()],
      ['protocolFeeOwner', getAddressEncoder()],
      ['migrateFeeOwner', getAddressEncoder()],
      ['migrateToAmmWallet', getAddressEncoder()],
      ['migrateToCpswapWallet', getAddressEncoder()],
      ['padding', getArrayEncoder(getU64Encoder(), { size: 16 })],
    ]),
    (value) => ({ ...value, discriminator: GLOBAL_CONFIG_DISCRIMINATOR })
  );
}

export function getGlobalConfigDecoder(): FixedSizeDecoder<GlobalConfig> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['epoch', getU64Decoder()],
    ['curveType', getU8Decoder()],
    ['index', getU16Decoder()],
    ['migrateFee', getU64Decoder()],
    ['tradeFeeRate', getU64Decoder()],
    ['maxShareFeeRate', getU64Decoder()],
    ['minBaseSupply', getU64Decoder()],
    ['maxLockRate', getU64Decoder()],
    ['minBaseSellRate', getU64Decoder()],
    ['minBaseMigrateRate', getU64Decoder()],
    ['minQuoteFundRaising', getU64Decoder()],
    ['quoteMint', getAddressDecoder()],
    ['protocolFeeOwner', getAddressDecoder()],
    ['migrateFeeOwner', getAddressDecoder()],
    ['migrateToAmmWallet', getAddressDecoder()],
    ['migrateToCpswapWallet', getAddressDecoder()],
    ['padding', getArrayDecoder(getU64Decoder(), { size: 16 })],
  ]);
}

export function getGlobalConfigCodec(): FixedSizeCodec<
  GlobalConfigArgs,
  GlobalConfig
> {
  return combineCodec(getGlobalConfigEncoder(), getGlobalConfigDecoder());
}

export function decodeGlobalConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<GlobalConfig, TAddress>;
export function decodeGlobalConfig<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<GlobalConfig, TAddress>;
export function decodeGlobalConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<GlobalConfig, TAddress> | MaybeAccount<GlobalConfig, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getGlobalConfigDecoder()
  );
}

export async function fetchGlobalConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<GlobalConfig, TAddress>> {
  const maybeAccount = await fetchMaybeGlobalConfig(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeGlobalConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<GlobalConfig, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeGlobalConfig(maybeAccount);
}

export async function fetchAllGlobalConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<GlobalConfig>[]> {
  const maybeAccounts = await fetchAllMaybeGlobalConfig(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeGlobalConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<GlobalConfig>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeGlobalConfig(maybeAccount));
}

export function getGlobalConfigSize(): number {
  return 371;
}
