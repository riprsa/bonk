/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const PLATFORM_CONFIG_DISCRIMINATOR = new Uint8Array([
  160, 78, 128, 0, 248, 83, 230, 160,
]);

export function getPlatformConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    PLATFORM_CONFIG_DISCRIMINATOR
  );
}

export type PlatformConfig = {
  discriminator: ReadonlyUint8Array;
  /** The epoch for update interval */
  epoch: bigint;
  /** The platform fee wallet */
  platformFeeWallet: Address;
  /** The platform nft wallet to receive the platform NFT after migration if platform_scale is not 0(Only support MigrateType::CPSWAP) */
  platformNftWallet: Address;
  /** Scale of the platform liquidity quantity rights will be converted into NFT(Only support MigrateType::CPSWAP) */
  platformScale: bigint;
  /** Scale of the token creator liquidity quantity rights will be converted into NFT(Only support MigrateType::CPSWAP) */
  creatorScale: bigint;
  /** Scale of liquidity directly to burn */
  burnScale: bigint;
  /** The platform fee rate */
  feeRate: bigint;
  /** The platform name */
  name: ReadonlyUint8Array;
  /** The platform website */
  web: ReadonlyUint8Array;
  /** The platform img link */
  img: ReadonlyUint8Array;
  /** padding for future updates */
  padding: ReadonlyUint8Array;
};

export type PlatformConfigArgs = {
  /** The epoch for update interval */
  epoch: number | bigint;
  /** The platform fee wallet */
  platformFeeWallet: Address;
  /** The platform nft wallet to receive the platform NFT after migration if platform_scale is not 0(Only support MigrateType::CPSWAP) */
  platformNftWallet: Address;
  /** Scale of the platform liquidity quantity rights will be converted into NFT(Only support MigrateType::CPSWAP) */
  platformScale: number | bigint;
  /** Scale of the token creator liquidity quantity rights will be converted into NFT(Only support MigrateType::CPSWAP) */
  creatorScale: number | bigint;
  /** Scale of liquidity directly to burn */
  burnScale: number | bigint;
  /** The platform fee rate */
  feeRate: number | bigint;
  /** The platform name */
  name: ReadonlyUint8Array;
  /** The platform website */
  web: ReadonlyUint8Array;
  /** The platform img link */
  img: ReadonlyUint8Array;
  /** padding for future updates */
  padding: ReadonlyUint8Array;
};

export function getPlatformConfigEncoder(): FixedSizeEncoder<PlatformConfigArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['epoch', getU64Encoder()],
      ['platformFeeWallet', getAddressEncoder()],
      ['platformNftWallet', getAddressEncoder()],
      ['platformScale', getU64Encoder()],
      ['creatorScale', getU64Encoder()],
      ['burnScale', getU64Encoder()],
      ['feeRate', getU64Encoder()],
      ['name', fixEncoderSize(getBytesEncoder(), 64)],
      ['web', fixEncoderSize(getBytesEncoder(), 256)],
      ['img', fixEncoderSize(getBytesEncoder(), 256)],
      ['padding', fixEncoderSize(getBytesEncoder(), 256)],
    ]),
    (value) => ({ ...value, discriminator: PLATFORM_CONFIG_DISCRIMINATOR })
  );
}

export function getPlatformConfigDecoder(): FixedSizeDecoder<PlatformConfig> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['epoch', getU64Decoder()],
    ['platformFeeWallet', getAddressDecoder()],
    ['platformNftWallet', getAddressDecoder()],
    ['platformScale', getU64Decoder()],
    ['creatorScale', getU64Decoder()],
    ['burnScale', getU64Decoder()],
    ['feeRate', getU64Decoder()],
    ['name', fixDecoderSize(getBytesDecoder(), 64)],
    ['web', fixDecoderSize(getBytesDecoder(), 256)],
    ['img', fixDecoderSize(getBytesDecoder(), 256)],
    ['padding', fixDecoderSize(getBytesDecoder(), 256)],
  ]);
}

export function getPlatformConfigCodec(): FixedSizeCodec<
  PlatformConfigArgs,
  PlatformConfig
> {
  return combineCodec(getPlatformConfigEncoder(), getPlatformConfigDecoder());
}

export function decodePlatformConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<PlatformConfig, TAddress>;
export function decodePlatformConfig<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<PlatformConfig, TAddress>;
export function decodePlatformConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<PlatformConfig, TAddress> | MaybeAccount<PlatformConfig, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getPlatformConfigDecoder()
  );
}

export async function fetchPlatformConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<PlatformConfig, TAddress>> {
  const maybeAccount = await fetchMaybePlatformConfig(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybePlatformConfig<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<PlatformConfig, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodePlatformConfig(maybeAccount);
}

export async function fetchAllPlatformConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<PlatformConfig>[]> {
  const maybeAccounts = await fetchAllMaybePlatformConfig(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybePlatformConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<PlatformConfig>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodePlatformConfig(maybeAccount)
  );
}

export function getPlatformConfigSize(): number {
  return 944;
}
