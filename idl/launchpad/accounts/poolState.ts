/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getVestingScheduleDecoder,
  getVestingScheduleEncoder,
  type VestingSchedule,
  type VestingScheduleArgs,
} from '../types';

export const POOL_STATE_DISCRIMINATOR = new Uint8Array([
  247, 237, 227, 245, 215, 195, 222, 70,
]);

export function getPoolStateDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(POOL_STATE_DISCRIMINATOR);
}

export type PoolState = {
  discriminator: ReadonlyUint8Array;
  /** Account update epoch */
  epoch: bigint;
  /** Bump seed used for PDA address derivation */
  authBump: number;
  /**
   * Current status of the pool
   * * 0: Pool is funding
   * * 1: Pool funding is end, waiting for migration
   * * 2: Pool migration is done
   */
  status: number;
  /** Decimals of the pool base token */
  baseDecimals: number;
  /** Decimals of the pool quote token */
  quoteDecimals: number;
  /** Migrate to AMM or CpSwap */
  migrateType: number;
  /** Supply of the pool base token */
  supply: bigint;
  /** Total sell amount of the base token */
  totalBaseSell: bigint;
  /**
   * For different curves, virtual_base and virtual_quote have different meanings
   * For constant product curve, virtual_base and virtual_quote are virtual liquidity, virtual_quote/virtual_base is the initial price
   * For linear price curve, virtual_base is the price slope parameter a, virtual_quote has no effect
   * For fixed price curve, virtual_quote/virtual_base is the initial price
   */
  virtualBase: bigint;
  virtualQuote: bigint;
  /**
   * Actual base token amount in the pool
   * Represents the real tokens available for trading
   */
  realBase: bigint;
  /**
   * Actual quote token amount in the pool
   * Represents the real tokens available for trading
   */
  realQuote: bigint;
  /** The total quote fund raising of the pool */
  totalQuoteFundRaising: bigint;
  /**
   * Accumulated trading fees in quote tokens
   * Can be collected by the protocol fee owner
   */
  quoteProtocolFee: bigint;
  /**
   * Accumulated platform fees in quote tokens
   * Can be collected by the platform wallet stored in platform config
   */
  platformFee: bigint;
  /** The fee of migrate to amm */
  migrateFee: bigint;
  /** Vesting schedule for the base token */
  vestingSchedule: VestingSchedule;
  /**
   * Public key of the global configuration account
   * Contains protocol-wide settings this pool adheres to
   */
  globalConfig: Address;
  /**
   * Public key of the platform configuration account
   * Contains platform-wide settings this pool adheres to
   */
  platformConfig: Address;
  /** Public key of the base mint address */
  baseMint: Address;
  /** Public key of the quote mint address */
  quoteMint: Address;
  /**
   * Public key of the base token vault
   * Holds the actual base tokens owned by the pool
   */
  baseVault: Address;
  /**
   * Public key of the quote token vault
   * Holds the actual quote tokens owned by the pool
   */
  quoteVault: Address;
  /** The creator of base token */
  creator: Address;
  /** padding for future updates */
  padding: Array<bigint>;
};

export type PoolStateArgs = {
  /** Account update epoch */
  epoch: number | bigint;
  /** Bump seed used for PDA address derivation */
  authBump: number;
  /**
   * Current status of the pool
   * * 0: Pool is funding
   * * 1: Pool funding is end, waiting for migration
   * * 2: Pool migration is done
   */
  status: number;
  /** Decimals of the pool base token */
  baseDecimals: number;
  /** Decimals of the pool quote token */
  quoteDecimals: number;
  /** Migrate to AMM or CpSwap */
  migrateType: number;
  /** Supply of the pool base token */
  supply: number | bigint;
  /** Total sell amount of the base token */
  totalBaseSell: number | bigint;
  /**
   * For different curves, virtual_base and virtual_quote have different meanings
   * For constant product curve, virtual_base and virtual_quote are virtual liquidity, virtual_quote/virtual_base is the initial price
   * For linear price curve, virtual_base is the price slope parameter a, virtual_quote has no effect
   * For fixed price curve, virtual_quote/virtual_base is the initial price
   */
  virtualBase: number | bigint;
  virtualQuote: number | bigint;
  /**
   * Actual base token amount in the pool
   * Represents the real tokens available for trading
   */
  realBase: number | bigint;
  /**
   * Actual quote token amount in the pool
   * Represents the real tokens available for trading
   */
  realQuote: number | bigint;
  /** The total quote fund raising of the pool */
  totalQuoteFundRaising: number | bigint;
  /**
   * Accumulated trading fees in quote tokens
   * Can be collected by the protocol fee owner
   */
  quoteProtocolFee: number | bigint;
  /**
   * Accumulated platform fees in quote tokens
   * Can be collected by the platform wallet stored in platform config
   */
  platformFee: number | bigint;
  /** The fee of migrate to amm */
  migrateFee: number | bigint;
  /** Vesting schedule for the base token */
  vestingSchedule: VestingScheduleArgs;
  /**
   * Public key of the global configuration account
   * Contains protocol-wide settings this pool adheres to
   */
  globalConfig: Address;
  /**
   * Public key of the platform configuration account
   * Contains platform-wide settings this pool adheres to
   */
  platformConfig: Address;
  /** Public key of the base mint address */
  baseMint: Address;
  /** Public key of the quote mint address */
  quoteMint: Address;
  /**
   * Public key of the base token vault
   * Holds the actual base tokens owned by the pool
   */
  baseVault: Address;
  /**
   * Public key of the quote token vault
   * Holds the actual quote tokens owned by the pool
   */
  quoteVault: Address;
  /** The creator of base token */
  creator: Address;
  /** padding for future updates */
  padding: Array<number | bigint>;
};

export function getPoolStateEncoder(): FixedSizeEncoder<PoolStateArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['epoch', getU64Encoder()],
      ['authBump', getU8Encoder()],
      ['status', getU8Encoder()],
      ['baseDecimals', getU8Encoder()],
      ['quoteDecimals', getU8Encoder()],
      ['migrateType', getU8Encoder()],
      ['supply', getU64Encoder()],
      ['totalBaseSell', getU64Encoder()],
      ['virtualBase', getU64Encoder()],
      ['virtualQuote', getU64Encoder()],
      ['realBase', getU64Encoder()],
      ['realQuote', getU64Encoder()],
      ['totalQuoteFundRaising', getU64Encoder()],
      ['quoteProtocolFee', getU64Encoder()],
      ['platformFee', getU64Encoder()],
      ['migrateFee', getU64Encoder()],
      ['vestingSchedule', getVestingScheduleEncoder()],
      ['globalConfig', getAddressEncoder()],
      ['platformConfig', getAddressEncoder()],
      ['baseMint', getAddressEncoder()],
      ['quoteMint', getAddressEncoder()],
      ['baseVault', getAddressEncoder()],
      ['quoteVault', getAddressEncoder()],
      ['creator', getAddressEncoder()],
      ['padding', getArrayEncoder(getU64Encoder(), { size: 8 })],
    ]),
    (value) => ({ ...value, discriminator: POOL_STATE_DISCRIMINATOR })
  );
}

export function getPoolStateDecoder(): FixedSizeDecoder<PoolState> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['epoch', getU64Decoder()],
    ['authBump', getU8Decoder()],
    ['status', getU8Decoder()],
    ['baseDecimals', getU8Decoder()],
    ['quoteDecimals', getU8Decoder()],
    ['migrateType', getU8Decoder()],
    ['supply', getU64Decoder()],
    ['totalBaseSell', getU64Decoder()],
    ['virtualBase', getU64Decoder()],
    ['virtualQuote', getU64Decoder()],
    ['realBase', getU64Decoder()],
    ['realQuote', getU64Decoder()],
    ['totalQuoteFundRaising', getU64Decoder()],
    ['quoteProtocolFee', getU64Decoder()],
    ['platformFee', getU64Decoder()],
    ['migrateFee', getU64Decoder()],
    ['vestingSchedule', getVestingScheduleDecoder()],
    ['globalConfig', getAddressDecoder()],
    ['platformConfig', getAddressDecoder()],
    ['baseMint', getAddressDecoder()],
    ['quoteMint', getAddressDecoder()],
    ['baseVault', getAddressDecoder()],
    ['quoteVault', getAddressDecoder()],
    ['creator', getAddressDecoder()],
    ['padding', getArrayDecoder(getU64Decoder(), { size: 8 })],
  ]);
}

export function getPoolStateCodec(): FixedSizeCodec<PoolStateArgs, PoolState> {
  return combineCodec(getPoolStateEncoder(), getPoolStateDecoder());
}

export function decodePoolState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<PoolState, TAddress>;
export function decodePoolState<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<PoolState, TAddress>;
export function decodePoolState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<PoolState, TAddress> | MaybeAccount<PoolState, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getPoolStateDecoder()
  );
}

export async function fetchPoolState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<PoolState, TAddress>> {
  const maybeAccount = await fetchMaybePoolState(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybePoolState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<PoolState, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodePoolState(maybeAccount);
}

export async function fetchAllPoolState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<PoolState>[]> {
  const maybeAccounts = await fetchAllMaybePoolState(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybePoolState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<PoolState>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodePoolState(maybeAccount));
}

export function getPoolStateSize(): number {
  return 429;
}
