/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const VESTING_RECORD_DISCRIMINATOR = new Uint8Array([
  106, 243, 221, 205, 230, 126, 85, 83,
]);

export function getVestingRecordDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    VESTING_RECORD_DISCRIMINATOR
  );
}

export type VestingRecord = {
  discriminator: ReadonlyUint8Array;
  /** Account update epoch */
  epoch: bigint;
  /** The pool state account */
  pool: Address;
  /** The beneficiary of the vesting account */
  beneficiary: Address;
  /** The amount of tokens claimed */
  claimedAmount: bigint;
  /** The share amount of the token to be vested */
  tokenShareAmount: bigint;
  /** padding for future updates */
  padding: Array<bigint>;
};

export type VestingRecordArgs = {
  /** Account update epoch */
  epoch: number | bigint;
  /** The pool state account */
  pool: Address;
  /** The beneficiary of the vesting account */
  beneficiary: Address;
  /** The amount of tokens claimed */
  claimedAmount: number | bigint;
  /** The share amount of the token to be vested */
  tokenShareAmount: number | bigint;
  /** padding for future updates */
  padding: Array<number | bigint>;
};

export function getVestingRecordEncoder(): FixedSizeEncoder<VestingRecordArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['epoch', getU64Encoder()],
      ['pool', getAddressEncoder()],
      ['beneficiary', getAddressEncoder()],
      ['claimedAmount', getU64Encoder()],
      ['tokenShareAmount', getU64Encoder()],
      ['padding', getArrayEncoder(getU64Encoder(), { size: 8 })],
    ]),
    (value) => ({ ...value, discriminator: VESTING_RECORD_DISCRIMINATOR })
  );
}

export function getVestingRecordDecoder(): FixedSizeDecoder<VestingRecord> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['epoch', getU64Decoder()],
    ['pool', getAddressDecoder()],
    ['beneficiary', getAddressDecoder()],
    ['claimedAmount', getU64Decoder()],
    ['tokenShareAmount', getU64Decoder()],
    ['padding', getArrayDecoder(getU64Decoder(), { size: 8 })],
  ]);
}

export function getVestingRecordCodec(): FixedSizeCodec<
  VestingRecordArgs,
  VestingRecord
> {
  return combineCodec(getVestingRecordEncoder(), getVestingRecordDecoder());
}

export function decodeVestingRecord<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<VestingRecord, TAddress>;
export function decodeVestingRecord<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<VestingRecord, TAddress>;
export function decodeVestingRecord<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<VestingRecord, TAddress> | MaybeAccount<VestingRecord, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getVestingRecordDecoder()
  );
}

export async function fetchVestingRecord<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<VestingRecord, TAddress>> {
  const maybeAccount = await fetchMaybeVestingRecord(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeVestingRecord<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<VestingRecord, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeVestingRecord(maybeAccount);
}

export async function fetchAllVestingRecord(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<VestingRecord>[]> {
  const maybeAccounts = await fetchAllMaybeVestingRecord(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeVestingRecord(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<VestingRecord>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeVestingRecord(maybeAccount));
}

export function getVestingRecordSize(): number {
  return 160;
}
