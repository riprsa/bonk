/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CLAIM_PLATFORM_FEE_DISCRIMINATOR = new Uint8Array([
  156, 39, 208, 135, 76, 237, 61, 72,
]);

export function getClaimPlatformFeeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLAIM_PLATFORM_FEE_DISCRIMINATOR
  );
}

export type ClaimPlatformFeeInstruction<
  TProgram extends string = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
  TAccountPlatformFeeWallet extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountPoolState extends string | AccountMeta<string> = string,
  TAccountPlatformConfig extends string | AccountMeta<string> = string,
  TAccountQuoteVault extends string | AccountMeta<string> = string,
  TAccountRecipientTokenAccount extends string | AccountMeta<string> = string,
  TAccountQuoteMint extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPlatformFeeWallet extends string
        ? WritableSignerAccount<TAccountPlatformFeeWallet> &
            AccountSignerMeta<TAccountPlatformFeeWallet>
        : TAccountPlatformFeeWallet,
      TAccountAuthority extends string
        ? ReadonlyAccount<TAccountAuthority>
        : TAccountAuthority,
      TAccountPoolState extends string
        ? WritableAccount<TAccountPoolState>
        : TAccountPoolState,
      TAccountPlatformConfig extends string
        ? ReadonlyAccount<TAccountPlatformConfig>
        : TAccountPlatformConfig,
      TAccountQuoteVault extends string
        ? WritableAccount<TAccountQuoteVault>
        : TAccountQuoteVault,
      TAccountRecipientTokenAccount extends string
        ? WritableAccount<TAccountRecipientTokenAccount>
        : TAccountRecipientTokenAccount,
      TAccountQuoteMint extends string
        ? ReadonlyAccount<TAccountQuoteMint>
        : TAccountQuoteMint,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ClaimPlatformFeeInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type ClaimPlatformFeeInstructionDataArgs = {};

export function getClaimPlatformFeeInstructionDataEncoder(): FixedSizeEncoder<ClaimPlatformFeeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: CLAIM_PLATFORM_FEE_DISCRIMINATOR })
  );
}

export function getClaimPlatformFeeInstructionDataDecoder(): FixedSizeDecoder<ClaimPlatformFeeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getClaimPlatformFeeInstructionDataCodec(): FixedSizeCodec<
  ClaimPlatformFeeInstructionDataArgs,
  ClaimPlatformFeeInstructionData
> {
  return combineCodec(
    getClaimPlatformFeeInstructionDataEncoder(),
    getClaimPlatformFeeInstructionDataDecoder()
  );
}

export type ClaimPlatformFeeAsyncInput<
  TAccountPlatformFeeWallet extends string = string,
  TAccountAuthority extends string = string,
  TAccountPoolState extends string = string,
  TAccountPlatformConfig extends string = string,
  TAccountQuoteVault extends string = string,
  TAccountRecipientTokenAccount extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
> = {
  /** Only the wallet stored in platform_config can collect platform fees */
  platformFeeWallet: TransactionSigner<TAccountPlatformFeeWallet>;
  /**
   * PDA that acts as the authority for pool vault and mint operations
   * Generated using AUTH_SEED
   */
  authority?: Address<TAccountAuthority>;
  /**
   * Account that stores the pool's state and parameters
   * PDA generated using POOL_SEED and both token mints
   */
  poolState: Address<TAccountPoolState>;
  /** The platform config account */
  platformConfig: Address<TAccountPlatformConfig>;
  quoteVault: Address<TAccountQuoteVault>;
  /** The address that receives the collected quote token fees */
  recipientTokenAccount?: Address<TAccountRecipientTokenAccount>;
  /** The mint of quote token vault */
  quoteMint: Address<TAccountQuoteMint>;
  /** SPL program for input token transfers */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** Required for account creation */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Required for associated token program */
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
};

export async function getClaimPlatformFeeInstructionAsync<
  TAccountPlatformFeeWallet extends string,
  TAccountAuthority extends string,
  TAccountPoolState extends string,
  TAccountPlatformConfig extends string,
  TAccountQuoteVault extends string,
  TAccountRecipientTokenAccount extends string,
  TAccountQuoteMint extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TProgramAddress extends Address = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
>(
  input: ClaimPlatformFeeAsyncInput<
    TAccountPlatformFeeWallet,
    TAccountAuthority,
    TAccountPoolState,
    TAccountPlatformConfig,
    TAccountQuoteVault,
    TAccountRecipientTokenAccount,
    TAccountQuoteMint,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ClaimPlatformFeeInstruction<
    TProgramAddress,
    TAccountPlatformFeeWallet,
    TAccountAuthority,
    TAccountPoolState,
    TAccountPlatformConfig,
    TAccountQuoteVault,
    TAccountRecipientTokenAccount,
    TAccountQuoteMint,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    platformFeeWallet: {
      value: input.platformFeeWallet ?? null,
      isWritable: true,
    },
    authority: { value: input.authority ?? null, isWritable: false },
    poolState: { value: input.poolState ?? null, isWritable: true },
    platformConfig: { value: input.platformConfig ?? null, isWritable: false },
    quoteVault: { value: input.quoteVault ?? null, isWritable: true },
    recipientTokenAccount: {
      value: input.recipientTokenAccount ?? null,
      isWritable: true,
    },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.authority.value) {
    accounts.authority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            118, 97, 117, 108, 116, 95, 97, 117, 116, 104, 95, 115, 101, 101,
            100,
          ])
        ),
      ],
    });
  }
  if (!accounts.recipientTokenAccount.value) {
    accounts.recipientTokenAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(
          expectAddress(accounts.platformFeeWallet.value)
        ),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.quoteMint.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.platformFeeWallet),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.poolState),
      getAccountMeta(accounts.platformConfig),
      getAccountMeta(accounts.quoteVault),
      getAccountMeta(accounts.recipientTokenAccount),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.associatedTokenProgram),
    ],
    programAddress,
    data: getClaimPlatformFeeInstructionDataEncoder().encode({}),
  } as ClaimPlatformFeeInstruction<
    TProgramAddress,
    TAccountPlatformFeeWallet,
    TAccountAuthority,
    TAccountPoolState,
    TAccountPlatformConfig,
    TAccountQuoteVault,
    TAccountRecipientTokenAccount,
    TAccountQuoteMint,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram
  >;

  return instruction;
}

export type ClaimPlatformFeeInput<
  TAccountPlatformFeeWallet extends string = string,
  TAccountAuthority extends string = string,
  TAccountPoolState extends string = string,
  TAccountPlatformConfig extends string = string,
  TAccountQuoteVault extends string = string,
  TAccountRecipientTokenAccount extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
> = {
  /** Only the wallet stored in platform_config can collect platform fees */
  platformFeeWallet: TransactionSigner<TAccountPlatformFeeWallet>;
  /**
   * PDA that acts as the authority for pool vault and mint operations
   * Generated using AUTH_SEED
   */
  authority: Address<TAccountAuthority>;
  /**
   * Account that stores the pool's state and parameters
   * PDA generated using POOL_SEED and both token mints
   */
  poolState: Address<TAccountPoolState>;
  /** The platform config account */
  platformConfig: Address<TAccountPlatformConfig>;
  quoteVault: Address<TAccountQuoteVault>;
  /** The address that receives the collected quote token fees */
  recipientTokenAccount: Address<TAccountRecipientTokenAccount>;
  /** The mint of quote token vault */
  quoteMint: Address<TAccountQuoteMint>;
  /** SPL program for input token transfers */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** Required for account creation */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Required for associated token program */
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
};

export function getClaimPlatformFeeInstruction<
  TAccountPlatformFeeWallet extends string,
  TAccountAuthority extends string,
  TAccountPoolState extends string,
  TAccountPlatformConfig extends string,
  TAccountQuoteVault extends string,
  TAccountRecipientTokenAccount extends string,
  TAccountQuoteMint extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TProgramAddress extends Address = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
>(
  input: ClaimPlatformFeeInput<
    TAccountPlatformFeeWallet,
    TAccountAuthority,
    TAccountPoolState,
    TAccountPlatformConfig,
    TAccountQuoteVault,
    TAccountRecipientTokenAccount,
    TAccountQuoteMint,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ClaimPlatformFeeInstruction<
  TProgramAddress,
  TAccountPlatformFeeWallet,
  TAccountAuthority,
  TAccountPoolState,
  TAccountPlatformConfig,
  TAccountQuoteVault,
  TAccountRecipientTokenAccount,
  TAccountQuoteMint,
  TAccountTokenProgram,
  TAccountSystemProgram,
  TAccountAssociatedTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    platformFeeWallet: {
      value: input.platformFeeWallet ?? null,
      isWritable: true,
    },
    authority: { value: input.authority ?? null, isWritable: false },
    poolState: { value: input.poolState ?? null, isWritable: true },
    platformConfig: { value: input.platformConfig ?? null, isWritable: false },
    quoteVault: { value: input.quoteVault ?? null, isWritable: true },
    recipientTokenAccount: {
      value: input.recipientTokenAccount ?? null,
      isWritable: true,
    },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.platformFeeWallet),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.poolState),
      getAccountMeta(accounts.platformConfig),
      getAccountMeta(accounts.quoteVault),
      getAccountMeta(accounts.recipientTokenAccount),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.associatedTokenProgram),
    ],
    programAddress,
    data: getClaimPlatformFeeInstructionDataEncoder().encode({}),
  } as ClaimPlatformFeeInstruction<
    TProgramAddress,
    TAccountPlatformFeeWallet,
    TAccountAuthority,
    TAccountPoolState,
    TAccountPlatformConfig,
    TAccountQuoteVault,
    TAccountRecipientTokenAccount,
    TAccountQuoteMint,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram
  >;

  return instruction;
}

export type ParsedClaimPlatformFeeInstruction<
  TProgram extends string = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Only the wallet stored in platform_config can collect platform fees */
    platformFeeWallet: TAccountMetas[0];
    /**
     * PDA that acts as the authority for pool vault and mint operations
     * Generated using AUTH_SEED
     */

    authority: TAccountMetas[1];
    /**
     * Account that stores the pool's state and parameters
     * PDA generated using POOL_SEED and both token mints
     */

    poolState: TAccountMetas[2];
    /** The platform config account */
    platformConfig: TAccountMetas[3];
    quoteVault: TAccountMetas[4];
    /** The address that receives the collected quote token fees */
    recipientTokenAccount: TAccountMetas[5];
    /** The mint of quote token vault */
    quoteMint: TAccountMetas[6];
    /** SPL program for input token transfers */
    tokenProgram: TAccountMetas[7];
    /** Required for account creation */
    systemProgram: TAccountMetas[8];
    /** Required for associated token program */
    associatedTokenProgram: TAccountMetas[9];
  };
  data: ClaimPlatformFeeInstructionData;
};

export function parseClaimPlatformFeeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedClaimPlatformFeeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      platformFeeWallet: getNextAccount(),
      authority: getNextAccount(),
      poolState: getNextAccount(),
      platformConfig: getNextAccount(),
      quoteVault: getNextAccount(),
      recipientTokenAccount: getNextAccount(),
      quoteMint: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
    },
    data: getClaimPlatformFeeInstructionDataDecoder().decode(instruction.data),
  };
}
