/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const MIGRATE_TO_AMM_DISCRIMINATOR = new Uint8Array([
  207, 82, 192, 145, 254, 207, 145, 223,
]);

export function getMigrateToAmmDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    MIGRATE_TO_AMM_DISCRIMINATOR
  );
}

export type MigrateToAmmInstruction<
  TProgram extends string = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountBaseMint extends string | AccountMeta<string> = string,
  TAccountQuoteMint extends string | AccountMeta<string> = string,
  TAccountOpenbookProgram extends
    | string
    | AccountMeta<string> = 'srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX',
  TAccountMarket extends string | AccountMeta<string> = string,
  TAccountRequestQueue extends string | AccountMeta<string> = string,
  TAccountEventQueue extends string | AccountMeta<string> = string,
  TAccountBids extends string | AccountMeta<string> = string,
  TAccountAsks extends string | AccountMeta<string> = string,
  TAccountMarketVaultSigner extends string | AccountMeta<string> = string,
  TAccountMarketBaseVault extends string | AccountMeta<string> = string,
  TAccountMarketQuoteVault extends string | AccountMeta<string> = string,
  TAccountAmmProgram extends
    | string
    | AccountMeta<string> = '675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8',
  TAccountAmmPool extends string | AccountMeta<string> = string,
  TAccountAmmAuthority extends string | AccountMeta<string> = string,
  TAccountAmmOpenOrders extends string | AccountMeta<string> = string,
  TAccountAmmLpMint extends string | AccountMeta<string> = string,
  TAccountAmmBaseVault extends string | AccountMeta<string> = string,
  TAccountAmmQuoteVault extends string | AccountMeta<string> = string,
  TAccountAmmTargetOrders extends string | AccountMeta<string> = string,
  TAccountAmmConfig extends string | AccountMeta<string> = string,
  TAccountAmmCreateFeeDestination extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountPoolState extends string | AccountMeta<string> = string,
  TAccountGlobalConfig extends string | AccountMeta<string> = string,
  TAccountBaseVault extends string | AccountMeta<string> = string,
  TAccountQuoteVault extends string | AccountMeta<string> = string,
  TAccountPoolLpToken extends string | AccountMeta<string> = string,
  TAccountSplTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountRentProgram extends
    | string
    | AccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountBaseMint extends string
        ? ReadonlyAccount<TAccountBaseMint>
        : TAccountBaseMint,
      TAccountQuoteMint extends string
        ? ReadonlyAccount<TAccountQuoteMint>
        : TAccountQuoteMint,
      TAccountOpenbookProgram extends string
        ? ReadonlyAccount<TAccountOpenbookProgram>
        : TAccountOpenbookProgram,
      TAccountMarket extends string
        ? WritableAccount<TAccountMarket>
        : TAccountMarket,
      TAccountRequestQueue extends string
        ? WritableAccount<TAccountRequestQueue>
        : TAccountRequestQueue,
      TAccountEventQueue extends string
        ? WritableAccount<TAccountEventQueue>
        : TAccountEventQueue,
      TAccountBids extends string
        ? WritableAccount<TAccountBids>
        : TAccountBids,
      TAccountAsks extends string
        ? WritableAccount<TAccountAsks>
        : TAccountAsks,
      TAccountMarketVaultSigner extends string
        ? ReadonlyAccount<TAccountMarketVaultSigner>
        : TAccountMarketVaultSigner,
      TAccountMarketBaseVault extends string
        ? WritableAccount<TAccountMarketBaseVault>
        : TAccountMarketBaseVault,
      TAccountMarketQuoteVault extends string
        ? WritableAccount<TAccountMarketQuoteVault>
        : TAccountMarketQuoteVault,
      TAccountAmmProgram extends string
        ? ReadonlyAccount<TAccountAmmProgram>
        : TAccountAmmProgram,
      TAccountAmmPool extends string
        ? WritableAccount<TAccountAmmPool>
        : TAccountAmmPool,
      TAccountAmmAuthority extends string
        ? ReadonlyAccount<TAccountAmmAuthority>
        : TAccountAmmAuthority,
      TAccountAmmOpenOrders extends string
        ? WritableAccount<TAccountAmmOpenOrders>
        : TAccountAmmOpenOrders,
      TAccountAmmLpMint extends string
        ? WritableAccount<TAccountAmmLpMint>
        : TAccountAmmLpMint,
      TAccountAmmBaseVault extends string
        ? WritableAccount<TAccountAmmBaseVault>
        : TAccountAmmBaseVault,
      TAccountAmmQuoteVault extends string
        ? WritableAccount<TAccountAmmQuoteVault>
        : TAccountAmmQuoteVault,
      TAccountAmmTargetOrders extends string
        ? WritableAccount<TAccountAmmTargetOrders>
        : TAccountAmmTargetOrders,
      TAccountAmmConfig extends string
        ? ReadonlyAccount<TAccountAmmConfig>
        : TAccountAmmConfig,
      TAccountAmmCreateFeeDestination extends string
        ? WritableAccount<TAccountAmmCreateFeeDestination>
        : TAccountAmmCreateFeeDestination,
      TAccountAuthority extends string
        ? WritableAccount<TAccountAuthority>
        : TAccountAuthority,
      TAccountPoolState extends string
        ? WritableAccount<TAccountPoolState>
        : TAccountPoolState,
      TAccountGlobalConfig extends string
        ? ReadonlyAccount<TAccountGlobalConfig>
        : TAccountGlobalConfig,
      TAccountBaseVault extends string
        ? WritableAccount<TAccountBaseVault>
        : TAccountBaseVault,
      TAccountQuoteVault extends string
        ? WritableAccount<TAccountQuoteVault>
        : TAccountQuoteVault,
      TAccountPoolLpToken extends string
        ? WritableAccount<TAccountPoolLpToken>
        : TAccountPoolLpToken,
      TAccountSplTokenProgram extends string
        ? ReadonlyAccount<TAccountSplTokenProgram>
        : TAccountSplTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRentProgram extends string
        ? ReadonlyAccount<TAccountRentProgram>
        : TAccountRentProgram,
      ...TRemainingAccounts,
    ]
  >;

export type MigrateToAmmInstructionData = {
  discriminator: ReadonlyUint8Array;
  baseLotSize: bigint;
  quoteLotSize: bigint;
  marketVaultSignerNonce: number;
};

export type MigrateToAmmInstructionDataArgs = {
  baseLotSize: number | bigint;
  quoteLotSize: number | bigint;
  marketVaultSignerNonce: number;
};

export function getMigrateToAmmInstructionDataEncoder(): FixedSizeEncoder<MigrateToAmmInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['baseLotSize', getU64Encoder()],
      ['quoteLotSize', getU64Encoder()],
      ['marketVaultSignerNonce', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: MIGRATE_TO_AMM_DISCRIMINATOR })
  );
}

export function getMigrateToAmmInstructionDataDecoder(): FixedSizeDecoder<MigrateToAmmInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['baseLotSize', getU64Decoder()],
    ['quoteLotSize', getU64Decoder()],
    ['marketVaultSignerNonce', getU8Decoder()],
  ]);
}

export function getMigrateToAmmInstructionDataCodec(): FixedSizeCodec<
  MigrateToAmmInstructionDataArgs,
  MigrateToAmmInstructionData
> {
  return combineCodec(
    getMigrateToAmmInstructionDataEncoder(),
    getMigrateToAmmInstructionDataDecoder()
  );
}

export type MigrateToAmmAsyncInput<
  TAccountPayer extends string = string,
  TAccountBaseMint extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountOpenbookProgram extends string = string,
  TAccountMarket extends string = string,
  TAccountRequestQueue extends string = string,
  TAccountEventQueue extends string = string,
  TAccountBids extends string = string,
  TAccountAsks extends string = string,
  TAccountMarketVaultSigner extends string = string,
  TAccountMarketBaseVault extends string = string,
  TAccountMarketQuoteVault extends string = string,
  TAccountAmmProgram extends string = string,
  TAccountAmmPool extends string = string,
  TAccountAmmAuthority extends string = string,
  TAccountAmmOpenOrders extends string = string,
  TAccountAmmLpMint extends string = string,
  TAccountAmmBaseVault extends string = string,
  TAccountAmmQuoteVault extends string = string,
  TAccountAmmTargetOrders extends string = string,
  TAccountAmmConfig extends string = string,
  TAccountAmmCreateFeeDestination extends string = string,
  TAccountAuthority extends string = string,
  TAccountPoolState extends string = string,
  TAccountGlobalConfig extends string = string,
  TAccountBaseVault extends string = string,
  TAccountQuoteVault extends string = string,
  TAccountPoolLpToken extends string = string,
  TAccountSplTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRentProgram extends string = string,
> = {
  /**
   * Only migrate_to_amm_wallet can migrate to cpswap pool
   * This signer must match the migrate_to_amm_wallet saved in global_config
   */
  payer: TransactionSigner<TAccountPayer>;
  /** The mint for the base token (token being sold) */
  baseMint: Address<TAccountBaseMint>;
  /** The mint for the quote token (token used to buy) */
  quoteMint: Address<TAccountQuoteMint>;
  openbookProgram?: Address<TAccountOpenbookProgram>;
  /** Account created and asigned to openbook_program but not been initialized */
  market: Address<TAccountMarket>;
  /** Account created and asigned to openbook_program but not been initialized */
  requestQueue: Address<TAccountRequestQueue>;
  /** Account created and asigned to openbook_program but not been initialized */
  eventQueue: Address<TAccountEventQueue>;
  /** Account created and asigned to openbook_program but not been initialized */
  bids: Address<TAccountBids>;
  /** Account created and asigned to openbook_program but not been initialized */
  asks: Address<TAccountAsks>;
  marketVaultSigner: Address<TAccountMarketVaultSigner>;
  /** Token account that holds the market's base tokens */
  marketBaseVault: Address<TAccountMarketBaseVault>;
  /** Token account that holds the market's quote tokens */
  marketQuoteVault: Address<TAccountMarketQuoteVault>;
  ammProgram?: Address<TAccountAmmProgram>;
  ammPool?: Address<TAccountAmmPool>;
  ammAuthority?: Address<TAccountAmmAuthority>;
  ammOpenOrders?: Address<TAccountAmmOpenOrders>;
  ammLpMint?: Address<TAccountAmmLpMint>;
  ammBaseVault?: Address<TAccountAmmBaseVault>;
  ammQuoteVault?: Address<TAccountAmmQuoteVault>;
  ammTargetOrders?: Address<TAccountAmmTargetOrders>;
  ammConfig?: Address<TAccountAmmConfig>;
  ammCreateFeeDestination: Address<TAccountAmmCreateFeeDestination>;
  /**
   * PDA that acts as the authority for pool vault operations
   * Generated using AUTH_SEED
   */
  authority?: Address<TAccountAuthority>;
  /**
   * Account that stores the pool's state and parameters
   * PDA generated using POOL_SEED and both token mints
   */
  poolState?: Address<TAccountPoolState>;
  /** Global config account stores owner */
  globalConfig: Address<TAccountGlobalConfig>;
  /**
   * The pool's vault for base tokens
   * Will be fully drained during migration
   */
  baseVault: Address<TAccountBaseVault>;
  /**
   * The pool's vault for quote tokens
   * Will be fully drained during migration
   */
  quoteVault: Address<TAccountQuoteVault>;
  poolLpToken: Address<TAccountPoolLpToken>;
  /**
   * SPL Token program for the base token
   * Must be the standard Token program
   */
  splTokenProgram?: Address<TAccountSplTokenProgram>;
  /** Program to create an ATA for receiving fee NFT */
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  /** Required for account creation */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Required for rent exempt calculations */
  rentProgram?: Address<TAccountRentProgram>;
  baseLotSize: MigrateToAmmInstructionDataArgs['baseLotSize'];
  quoteLotSize: MigrateToAmmInstructionDataArgs['quoteLotSize'];
  marketVaultSignerNonce: MigrateToAmmInstructionDataArgs['marketVaultSignerNonce'];
};

export async function getMigrateToAmmInstructionAsync<
  TAccountPayer extends string,
  TAccountBaseMint extends string,
  TAccountQuoteMint extends string,
  TAccountOpenbookProgram extends string,
  TAccountMarket extends string,
  TAccountRequestQueue extends string,
  TAccountEventQueue extends string,
  TAccountBids extends string,
  TAccountAsks extends string,
  TAccountMarketVaultSigner extends string,
  TAccountMarketBaseVault extends string,
  TAccountMarketQuoteVault extends string,
  TAccountAmmProgram extends string,
  TAccountAmmPool extends string,
  TAccountAmmAuthority extends string,
  TAccountAmmOpenOrders extends string,
  TAccountAmmLpMint extends string,
  TAccountAmmBaseVault extends string,
  TAccountAmmQuoteVault extends string,
  TAccountAmmTargetOrders extends string,
  TAccountAmmConfig extends string,
  TAccountAmmCreateFeeDestination extends string,
  TAccountAuthority extends string,
  TAccountPoolState extends string,
  TAccountGlobalConfig extends string,
  TAccountBaseVault extends string,
  TAccountQuoteVault extends string,
  TAccountPoolLpToken extends string,
  TAccountSplTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountRentProgram extends string,
  TProgramAddress extends Address = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
>(
  input: MigrateToAmmAsyncInput<
    TAccountPayer,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountOpenbookProgram,
    TAccountMarket,
    TAccountRequestQueue,
    TAccountEventQueue,
    TAccountBids,
    TAccountAsks,
    TAccountMarketVaultSigner,
    TAccountMarketBaseVault,
    TAccountMarketQuoteVault,
    TAccountAmmProgram,
    TAccountAmmPool,
    TAccountAmmAuthority,
    TAccountAmmOpenOrders,
    TAccountAmmLpMint,
    TAccountAmmBaseVault,
    TAccountAmmQuoteVault,
    TAccountAmmTargetOrders,
    TAccountAmmConfig,
    TAccountAmmCreateFeeDestination,
    TAccountAuthority,
    TAccountPoolState,
    TAccountGlobalConfig,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountPoolLpToken,
    TAccountSplTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRentProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  MigrateToAmmInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountOpenbookProgram,
    TAccountMarket,
    TAccountRequestQueue,
    TAccountEventQueue,
    TAccountBids,
    TAccountAsks,
    TAccountMarketVaultSigner,
    TAccountMarketBaseVault,
    TAccountMarketQuoteVault,
    TAccountAmmProgram,
    TAccountAmmPool,
    TAccountAmmAuthority,
    TAccountAmmOpenOrders,
    TAccountAmmLpMint,
    TAccountAmmBaseVault,
    TAccountAmmQuoteVault,
    TAccountAmmTargetOrders,
    TAccountAmmConfig,
    TAccountAmmCreateFeeDestination,
    TAccountAuthority,
    TAccountPoolState,
    TAccountGlobalConfig,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountPoolLpToken,
    TAccountSplTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRentProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    baseMint: { value: input.baseMint ?? null, isWritable: false },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    openbookProgram: {
      value: input.openbookProgram ?? null,
      isWritable: false,
    },
    market: { value: input.market ?? null, isWritable: true },
    requestQueue: { value: input.requestQueue ?? null, isWritable: true },
    eventQueue: { value: input.eventQueue ?? null, isWritable: true },
    bids: { value: input.bids ?? null, isWritable: true },
    asks: { value: input.asks ?? null, isWritable: true },
    marketVaultSigner: {
      value: input.marketVaultSigner ?? null,
      isWritable: false,
    },
    marketBaseVault: { value: input.marketBaseVault ?? null, isWritable: true },
    marketQuoteVault: {
      value: input.marketQuoteVault ?? null,
      isWritable: true,
    },
    ammProgram: { value: input.ammProgram ?? null, isWritable: false },
    ammPool: { value: input.ammPool ?? null, isWritable: true },
    ammAuthority: { value: input.ammAuthority ?? null, isWritable: false },
    ammOpenOrders: { value: input.ammOpenOrders ?? null, isWritable: true },
    ammLpMint: { value: input.ammLpMint ?? null, isWritable: true },
    ammBaseVault: { value: input.ammBaseVault ?? null, isWritable: true },
    ammQuoteVault: { value: input.ammQuoteVault ?? null, isWritable: true },
    ammTargetOrders: { value: input.ammTargetOrders ?? null, isWritable: true },
    ammConfig: { value: input.ammConfig ?? null, isWritable: false },
    ammCreateFeeDestination: {
      value: input.ammCreateFeeDestination ?? null,
      isWritable: true,
    },
    authority: { value: input.authority ?? null, isWritable: true },
    poolState: { value: input.poolState ?? null, isWritable: true },
    globalConfig: { value: input.globalConfig ?? null, isWritable: false },
    baseVault: { value: input.baseVault ?? null, isWritable: true },
    quoteVault: { value: input.quoteVault ?? null, isWritable: true },
    poolLpToken: { value: input.poolLpToken ?? null, isWritable: true },
    splTokenProgram: {
      value: input.splTokenProgram ?? null,
      isWritable: false,
    },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rentProgram: { value: input.rentProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.openbookProgram.value) {
    accounts.openbookProgram.value =
      'srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX' as Address<'srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX'>;
  }
  if (!accounts.ammProgram.value) {
    accounts.ammProgram.value =
      '675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8' as Address<'675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8'>;
  }
  if (!accounts.ammPool.value) {
    accounts.ammPool.value = await getProgramDerivedAddress({
      programAddress:
        '675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8' as Address<'675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.ammProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.market.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            97, 109, 109, 95, 97, 115, 115, 111, 99, 105, 97, 116, 101, 100, 95,
            115, 101, 101, 100,
          ])
        ),
      ],
    });
  }
  if (!accounts.ammAuthority.value) {
    accounts.ammAuthority.value = await getProgramDerivedAddress({
      programAddress:
        '675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8' as Address<'675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8'>,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            97, 109, 109, 32, 97, 117, 116, 104, 111, 114, 105, 116, 121,
          ])
        ),
      ],
    });
  }
  if (!accounts.ammOpenOrders.value) {
    accounts.ammOpenOrders.value = await getProgramDerivedAddress({
      programAddress:
        '675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8' as Address<'675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.ammProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.market.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            111, 112, 101, 110, 95, 111, 114, 100, 101, 114, 95, 97, 115, 115,
            111, 99, 105, 97, 116, 101, 100, 95, 115, 101, 101, 100,
          ])
        ),
      ],
    });
  }
  if (!accounts.ammLpMint.value) {
    accounts.ammLpMint.value = await getProgramDerivedAddress({
      programAddress:
        '675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8' as Address<'675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.ammProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.market.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            108, 112, 95, 109, 105, 110, 116, 95, 97, 115, 115, 111, 99, 105,
            97, 116, 101, 100, 95, 115, 101, 101, 100,
          ])
        ),
      ],
    });
  }
  if (!accounts.ammBaseVault.value) {
    accounts.ammBaseVault.value = await getProgramDerivedAddress({
      programAddress:
        '675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8' as Address<'675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.ammProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.market.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            99, 111, 105, 110, 95, 118, 97, 117, 108, 116, 95, 97, 115, 115,
            111, 99, 105, 97, 116, 101, 100, 95, 115, 101, 101, 100,
          ])
        ),
      ],
    });
  }
  if (!accounts.ammQuoteVault.value) {
    accounts.ammQuoteVault.value = await getProgramDerivedAddress({
      programAddress:
        '675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8' as Address<'675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.ammProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.market.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            112, 99, 95, 118, 97, 117, 108, 116, 95, 97, 115, 115, 111, 99, 105,
            97, 116, 101, 100, 95, 115, 101, 101, 100,
          ])
        ),
      ],
    });
  }
  if (!accounts.ammTargetOrders.value) {
    accounts.ammTargetOrders.value = await getProgramDerivedAddress({
      programAddress:
        '675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8' as Address<'675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.ammProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.market.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            116, 97, 114, 103, 101, 116, 95, 97, 115, 115, 111, 99, 105, 97,
            116, 101, 100, 95, 115, 101, 101, 100,
          ])
        ),
      ],
    });
  }
  if (!accounts.ammConfig.value) {
    accounts.ammConfig.value = await getProgramDerivedAddress({
      programAddress:
        '675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8' as Address<'675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8'>,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            97, 109, 109, 95, 99, 111, 110, 102, 105, 103, 95, 97, 99, 99, 111,
            117, 110, 116, 95, 115, 101, 101, 100,
          ])
        ),
      ],
    });
  }
  if (!accounts.authority.value) {
    accounts.authority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            118, 97, 117, 108, 116, 95, 97, 117, 116, 104, 95, 115, 101, 101,
            100,
          ])
        ),
      ],
    });
  }
  if (!accounts.poolState.value) {
    accounts.poolState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([112, 111, 111, 108])),
        getAddressEncoder().encode(expectAddress(accounts.baseMint.value)),
        getAddressEncoder().encode(expectAddress(accounts.quoteMint.value)),
      ],
    });
  }
  if (!accounts.splTokenProgram.value) {
    accounts.splTokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rentProgram.value) {
    accounts.rentProgram.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.baseMint),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.openbookProgram),
      getAccountMeta(accounts.market),
      getAccountMeta(accounts.requestQueue),
      getAccountMeta(accounts.eventQueue),
      getAccountMeta(accounts.bids),
      getAccountMeta(accounts.asks),
      getAccountMeta(accounts.marketVaultSigner),
      getAccountMeta(accounts.marketBaseVault),
      getAccountMeta(accounts.marketQuoteVault),
      getAccountMeta(accounts.ammProgram),
      getAccountMeta(accounts.ammPool),
      getAccountMeta(accounts.ammAuthority),
      getAccountMeta(accounts.ammOpenOrders),
      getAccountMeta(accounts.ammLpMint),
      getAccountMeta(accounts.ammBaseVault),
      getAccountMeta(accounts.ammQuoteVault),
      getAccountMeta(accounts.ammTargetOrders),
      getAccountMeta(accounts.ammConfig),
      getAccountMeta(accounts.ammCreateFeeDestination),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.poolState),
      getAccountMeta(accounts.globalConfig),
      getAccountMeta(accounts.baseVault),
      getAccountMeta(accounts.quoteVault),
      getAccountMeta(accounts.poolLpToken),
      getAccountMeta(accounts.splTokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rentProgram),
    ],
    programAddress,
    data: getMigrateToAmmInstructionDataEncoder().encode(
      args as MigrateToAmmInstructionDataArgs
    ),
  } as MigrateToAmmInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountOpenbookProgram,
    TAccountMarket,
    TAccountRequestQueue,
    TAccountEventQueue,
    TAccountBids,
    TAccountAsks,
    TAccountMarketVaultSigner,
    TAccountMarketBaseVault,
    TAccountMarketQuoteVault,
    TAccountAmmProgram,
    TAccountAmmPool,
    TAccountAmmAuthority,
    TAccountAmmOpenOrders,
    TAccountAmmLpMint,
    TAccountAmmBaseVault,
    TAccountAmmQuoteVault,
    TAccountAmmTargetOrders,
    TAccountAmmConfig,
    TAccountAmmCreateFeeDestination,
    TAccountAuthority,
    TAccountPoolState,
    TAccountGlobalConfig,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountPoolLpToken,
    TAccountSplTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRentProgram
  >;

  return instruction;
}

export type MigrateToAmmInput<
  TAccountPayer extends string = string,
  TAccountBaseMint extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountOpenbookProgram extends string = string,
  TAccountMarket extends string = string,
  TAccountRequestQueue extends string = string,
  TAccountEventQueue extends string = string,
  TAccountBids extends string = string,
  TAccountAsks extends string = string,
  TAccountMarketVaultSigner extends string = string,
  TAccountMarketBaseVault extends string = string,
  TAccountMarketQuoteVault extends string = string,
  TAccountAmmProgram extends string = string,
  TAccountAmmPool extends string = string,
  TAccountAmmAuthority extends string = string,
  TAccountAmmOpenOrders extends string = string,
  TAccountAmmLpMint extends string = string,
  TAccountAmmBaseVault extends string = string,
  TAccountAmmQuoteVault extends string = string,
  TAccountAmmTargetOrders extends string = string,
  TAccountAmmConfig extends string = string,
  TAccountAmmCreateFeeDestination extends string = string,
  TAccountAuthority extends string = string,
  TAccountPoolState extends string = string,
  TAccountGlobalConfig extends string = string,
  TAccountBaseVault extends string = string,
  TAccountQuoteVault extends string = string,
  TAccountPoolLpToken extends string = string,
  TAccountSplTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRentProgram extends string = string,
> = {
  /**
   * Only migrate_to_amm_wallet can migrate to cpswap pool
   * This signer must match the migrate_to_amm_wallet saved in global_config
   */
  payer: TransactionSigner<TAccountPayer>;
  /** The mint for the base token (token being sold) */
  baseMint: Address<TAccountBaseMint>;
  /** The mint for the quote token (token used to buy) */
  quoteMint: Address<TAccountQuoteMint>;
  openbookProgram?: Address<TAccountOpenbookProgram>;
  /** Account created and asigned to openbook_program but not been initialized */
  market: Address<TAccountMarket>;
  /** Account created and asigned to openbook_program but not been initialized */
  requestQueue: Address<TAccountRequestQueue>;
  /** Account created and asigned to openbook_program but not been initialized */
  eventQueue: Address<TAccountEventQueue>;
  /** Account created and asigned to openbook_program but not been initialized */
  bids: Address<TAccountBids>;
  /** Account created and asigned to openbook_program but not been initialized */
  asks: Address<TAccountAsks>;
  marketVaultSigner: Address<TAccountMarketVaultSigner>;
  /** Token account that holds the market's base tokens */
  marketBaseVault: Address<TAccountMarketBaseVault>;
  /** Token account that holds the market's quote tokens */
  marketQuoteVault: Address<TAccountMarketQuoteVault>;
  ammProgram?: Address<TAccountAmmProgram>;
  ammPool: Address<TAccountAmmPool>;
  ammAuthority: Address<TAccountAmmAuthority>;
  ammOpenOrders: Address<TAccountAmmOpenOrders>;
  ammLpMint: Address<TAccountAmmLpMint>;
  ammBaseVault: Address<TAccountAmmBaseVault>;
  ammQuoteVault: Address<TAccountAmmQuoteVault>;
  ammTargetOrders: Address<TAccountAmmTargetOrders>;
  ammConfig: Address<TAccountAmmConfig>;
  ammCreateFeeDestination: Address<TAccountAmmCreateFeeDestination>;
  /**
   * PDA that acts as the authority for pool vault operations
   * Generated using AUTH_SEED
   */
  authority: Address<TAccountAuthority>;
  /**
   * Account that stores the pool's state and parameters
   * PDA generated using POOL_SEED and both token mints
   */
  poolState: Address<TAccountPoolState>;
  /** Global config account stores owner */
  globalConfig: Address<TAccountGlobalConfig>;
  /**
   * The pool's vault for base tokens
   * Will be fully drained during migration
   */
  baseVault: Address<TAccountBaseVault>;
  /**
   * The pool's vault for quote tokens
   * Will be fully drained during migration
   */
  quoteVault: Address<TAccountQuoteVault>;
  poolLpToken: Address<TAccountPoolLpToken>;
  /**
   * SPL Token program for the base token
   * Must be the standard Token program
   */
  splTokenProgram?: Address<TAccountSplTokenProgram>;
  /** Program to create an ATA for receiving fee NFT */
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  /** Required for account creation */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Required for rent exempt calculations */
  rentProgram?: Address<TAccountRentProgram>;
  baseLotSize: MigrateToAmmInstructionDataArgs['baseLotSize'];
  quoteLotSize: MigrateToAmmInstructionDataArgs['quoteLotSize'];
  marketVaultSignerNonce: MigrateToAmmInstructionDataArgs['marketVaultSignerNonce'];
};

export function getMigrateToAmmInstruction<
  TAccountPayer extends string,
  TAccountBaseMint extends string,
  TAccountQuoteMint extends string,
  TAccountOpenbookProgram extends string,
  TAccountMarket extends string,
  TAccountRequestQueue extends string,
  TAccountEventQueue extends string,
  TAccountBids extends string,
  TAccountAsks extends string,
  TAccountMarketVaultSigner extends string,
  TAccountMarketBaseVault extends string,
  TAccountMarketQuoteVault extends string,
  TAccountAmmProgram extends string,
  TAccountAmmPool extends string,
  TAccountAmmAuthority extends string,
  TAccountAmmOpenOrders extends string,
  TAccountAmmLpMint extends string,
  TAccountAmmBaseVault extends string,
  TAccountAmmQuoteVault extends string,
  TAccountAmmTargetOrders extends string,
  TAccountAmmConfig extends string,
  TAccountAmmCreateFeeDestination extends string,
  TAccountAuthority extends string,
  TAccountPoolState extends string,
  TAccountGlobalConfig extends string,
  TAccountBaseVault extends string,
  TAccountQuoteVault extends string,
  TAccountPoolLpToken extends string,
  TAccountSplTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountRentProgram extends string,
  TProgramAddress extends Address = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
>(
  input: MigrateToAmmInput<
    TAccountPayer,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountOpenbookProgram,
    TAccountMarket,
    TAccountRequestQueue,
    TAccountEventQueue,
    TAccountBids,
    TAccountAsks,
    TAccountMarketVaultSigner,
    TAccountMarketBaseVault,
    TAccountMarketQuoteVault,
    TAccountAmmProgram,
    TAccountAmmPool,
    TAccountAmmAuthority,
    TAccountAmmOpenOrders,
    TAccountAmmLpMint,
    TAccountAmmBaseVault,
    TAccountAmmQuoteVault,
    TAccountAmmTargetOrders,
    TAccountAmmConfig,
    TAccountAmmCreateFeeDestination,
    TAccountAuthority,
    TAccountPoolState,
    TAccountGlobalConfig,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountPoolLpToken,
    TAccountSplTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRentProgram
  >,
  config?: { programAddress?: TProgramAddress }
): MigrateToAmmInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountBaseMint,
  TAccountQuoteMint,
  TAccountOpenbookProgram,
  TAccountMarket,
  TAccountRequestQueue,
  TAccountEventQueue,
  TAccountBids,
  TAccountAsks,
  TAccountMarketVaultSigner,
  TAccountMarketBaseVault,
  TAccountMarketQuoteVault,
  TAccountAmmProgram,
  TAccountAmmPool,
  TAccountAmmAuthority,
  TAccountAmmOpenOrders,
  TAccountAmmLpMint,
  TAccountAmmBaseVault,
  TAccountAmmQuoteVault,
  TAccountAmmTargetOrders,
  TAccountAmmConfig,
  TAccountAmmCreateFeeDestination,
  TAccountAuthority,
  TAccountPoolState,
  TAccountGlobalConfig,
  TAccountBaseVault,
  TAccountQuoteVault,
  TAccountPoolLpToken,
  TAccountSplTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountSystemProgram,
  TAccountRentProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    baseMint: { value: input.baseMint ?? null, isWritable: false },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    openbookProgram: {
      value: input.openbookProgram ?? null,
      isWritable: false,
    },
    market: { value: input.market ?? null, isWritable: true },
    requestQueue: { value: input.requestQueue ?? null, isWritable: true },
    eventQueue: { value: input.eventQueue ?? null, isWritable: true },
    bids: { value: input.bids ?? null, isWritable: true },
    asks: { value: input.asks ?? null, isWritable: true },
    marketVaultSigner: {
      value: input.marketVaultSigner ?? null,
      isWritable: false,
    },
    marketBaseVault: { value: input.marketBaseVault ?? null, isWritable: true },
    marketQuoteVault: {
      value: input.marketQuoteVault ?? null,
      isWritable: true,
    },
    ammProgram: { value: input.ammProgram ?? null, isWritable: false },
    ammPool: { value: input.ammPool ?? null, isWritable: true },
    ammAuthority: { value: input.ammAuthority ?? null, isWritable: false },
    ammOpenOrders: { value: input.ammOpenOrders ?? null, isWritable: true },
    ammLpMint: { value: input.ammLpMint ?? null, isWritable: true },
    ammBaseVault: { value: input.ammBaseVault ?? null, isWritable: true },
    ammQuoteVault: { value: input.ammQuoteVault ?? null, isWritable: true },
    ammTargetOrders: { value: input.ammTargetOrders ?? null, isWritable: true },
    ammConfig: { value: input.ammConfig ?? null, isWritable: false },
    ammCreateFeeDestination: {
      value: input.ammCreateFeeDestination ?? null,
      isWritable: true,
    },
    authority: { value: input.authority ?? null, isWritable: true },
    poolState: { value: input.poolState ?? null, isWritable: true },
    globalConfig: { value: input.globalConfig ?? null, isWritable: false },
    baseVault: { value: input.baseVault ?? null, isWritable: true },
    quoteVault: { value: input.quoteVault ?? null, isWritable: true },
    poolLpToken: { value: input.poolLpToken ?? null, isWritable: true },
    splTokenProgram: {
      value: input.splTokenProgram ?? null,
      isWritable: false,
    },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rentProgram: { value: input.rentProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.openbookProgram.value) {
    accounts.openbookProgram.value =
      'srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX' as Address<'srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX'>;
  }
  if (!accounts.ammProgram.value) {
    accounts.ammProgram.value =
      '675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8' as Address<'675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8'>;
  }
  if (!accounts.splTokenProgram.value) {
    accounts.splTokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rentProgram.value) {
    accounts.rentProgram.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.baseMint),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.openbookProgram),
      getAccountMeta(accounts.market),
      getAccountMeta(accounts.requestQueue),
      getAccountMeta(accounts.eventQueue),
      getAccountMeta(accounts.bids),
      getAccountMeta(accounts.asks),
      getAccountMeta(accounts.marketVaultSigner),
      getAccountMeta(accounts.marketBaseVault),
      getAccountMeta(accounts.marketQuoteVault),
      getAccountMeta(accounts.ammProgram),
      getAccountMeta(accounts.ammPool),
      getAccountMeta(accounts.ammAuthority),
      getAccountMeta(accounts.ammOpenOrders),
      getAccountMeta(accounts.ammLpMint),
      getAccountMeta(accounts.ammBaseVault),
      getAccountMeta(accounts.ammQuoteVault),
      getAccountMeta(accounts.ammTargetOrders),
      getAccountMeta(accounts.ammConfig),
      getAccountMeta(accounts.ammCreateFeeDestination),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.poolState),
      getAccountMeta(accounts.globalConfig),
      getAccountMeta(accounts.baseVault),
      getAccountMeta(accounts.quoteVault),
      getAccountMeta(accounts.poolLpToken),
      getAccountMeta(accounts.splTokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rentProgram),
    ],
    programAddress,
    data: getMigrateToAmmInstructionDataEncoder().encode(
      args as MigrateToAmmInstructionDataArgs
    ),
  } as MigrateToAmmInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountOpenbookProgram,
    TAccountMarket,
    TAccountRequestQueue,
    TAccountEventQueue,
    TAccountBids,
    TAccountAsks,
    TAccountMarketVaultSigner,
    TAccountMarketBaseVault,
    TAccountMarketQuoteVault,
    TAccountAmmProgram,
    TAccountAmmPool,
    TAccountAmmAuthority,
    TAccountAmmOpenOrders,
    TAccountAmmLpMint,
    TAccountAmmBaseVault,
    TAccountAmmQuoteVault,
    TAccountAmmTargetOrders,
    TAccountAmmConfig,
    TAccountAmmCreateFeeDestination,
    TAccountAuthority,
    TAccountPoolState,
    TAccountGlobalConfig,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountPoolLpToken,
    TAccountSplTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRentProgram
  >;

  return instruction;
}

export type ParsedMigrateToAmmInstruction<
  TProgram extends string = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /**
     * Only migrate_to_amm_wallet can migrate to cpswap pool
     * This signer must match the migrate_to_amm_wallet saved in global_config
     */

    payer: TAccountMetas[0];
    /** The mint for the base token (token being sold) */
    baseMint: TAccountMetas[1];
    /** The mint for the quote token (token used to buy) */
    quoteMint: TAccountMetas[2];
    openbookProgram: TAccountMetas[3];
    /** Account created and asigned to openbook_program but not been initialized */
    market: TAccountMetas[4];
    /** Account created and asigned to openbook_program but not been initialized */
    requestQueue: TAccountMetas[5];
    /** Account created and asigned to openbook_program but not been initialized */
    eventQueue: TAccountMetas[6];
    /** Account created and asigned to openbook_program but not been initialized */
    bids: TAccountMetas[7];
    /** Account created and asigned to openbook_program but not been initialized */
    asks: TAccountMetas[8];
    marketVaultSigner: TAccountMetas[9];
    /** Token account that holds the market's base tokens */
    marketBaseVault: TAccountMetas[10];
    /** Token account that holds the market's quote tokens */
    marketQuoteVault: TAccountMetas[11];
    ammProgram: TAccountMetas[12];
    ammPool: TAccountMetas[13];
    ammAuthority: TAccountMetas[14];
    ammOpenOrders: TAccountMetas[15];
    ammLpMint: TAccountMetas[16];
    ammBaseVault: TAccountMetas[17];
    ammQuoteVault: TAccountMetas[18];
    ammTargetOrders: TAccountMetas[19];
    ammConfig: TAccountMetas[20];
    ammCreateFeeDestination: TAccountMetas[21];
    /**
     * PDA that acts as the authority for pool vault operations
     * Generated using AUTH_SEED
     */

    authority: TAccountMetas[22];
    /**
     * Account that stores the pool's state and parameters
     * PDA generated using POOL_SEED and both token mints
     */

    poolState: TAccountMetas[23];
    /** Global config account stores owner */
    globalConfig: TAccountMetas[24];
    /**
     * The pool's vault for base tokens
     * Will be fully drained during migration
     */

    baseVault: TAccountMetas[25];
    /**
     * The pool's vault for quote tokens
     * Will be fully drained during migration
     */

    quoteVault: TAccountMetas[26];
    poolLpToken: TAccountMetas[27];
    /**
     * SPL Token program for the base token
     * Must be the standard Token program
     */

    splTokenProgram: TAccountMetas[28];
    /** Program to create an ATA for receiving fee NFT */
    associatedTokenProgram: TAccountMetas[29];
    /** Required for account creation */
    systemProgram: TAccountMetas[30];
    /** Required for rent exempt calculations */
    rentProgram: TAccountMetas[31];
  };
  data: MigrateToAmmInstructionData;
};

export function parseMigrateToAmmInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedMigrateToAmmInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 32) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      baseMint: getNextAccount(),
      quoteMint: getNextAccount(),
      openbookProgram: getNextAccount(),
      market: getNextAccount(),
      requestQueue: getNextAccount(),
      eventQueue: getNextAccount(),
      bids: getNextAccount(),
      asks: getNextAccount(),
      marketVaultSigner: getNextAccount(),
      marketBaseVault: getNextAccount(),
      marketQuoteVault: getNextAccount(),
      ammProgram: getNextAccount(),
      ammPool: getNextAccount(),
      ammAuthority: getNextAccount(),
      ammOpenOrders: getNextAccount(),
      ammLpMint: getNextAccount(),
      ammBaseVault: getNextAccount(),
      ammQuoteVault: getNextAccount(),
      ammTargetOrders: getNextAccount(),
      ammConfig: getNextAccount(),
      ammCreateFeeDestination: getNextAccount(),
      authority: getNextAccount(),
      poolState: getNextAccount(),
      globalConfig: getNextAccount(),
      baseVault: getNextAccount(),
      quoteVault: getNextAccount(),
      poolLpToken: getNextAccount(),
      splTokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      rentProgram: getNextAccount(),
    },
    data: getMigrateToAmmInstructionDataDecoder().decode(instruction.data),
  };
}
