/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CREATE_VESTING_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  129, 178, 2, 13, 217, 172, 230, 218,
]);

export function getCreateVestingAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_VESTING_ACCOUNT_DISCRIMINATOR
  );
}

export type CreateVestingAccountInstruction<
  TProgram extends string = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
  TAccountCreator extends string | AccountMeta<string> = string,
  TAccountBeneficiary extends string | AccountMeta<string> = string,
  TAccountPoolState extends string | AccountMeta<string> = string,
  TAccountVestingRecord extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountCreator extends string
        ? WritableSignerAccount<TAccountCreator> &
            AccountSignerMeta<TAccountCreator>
        : TAccountCreator,
      TAccountBeneficiary extends string
        ? WritableAccount<TAccountBeneficiary>
        : TAccountBeneficiary,
      TAccountPoolState extends string
        ? WritableAccount<TAccountPoolState>
        : TAccountPoolState,
      TAccountVestingRecord extends string
        ? WritableAccount<TAccountVestingRecord>
        : TAccountVestingRecord,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateVestingAccountInstructionData = {
  discriminator: ReadonlyUint8Array;
  shareAmount: bigint;
};

export type CreateVestingAccountInstructionDataArgs = {
  shareAmount: number | bigint;
};

export function getCreateVestingAccountInstructionDataEncoder(): FixedSizeEncoder<CreateVestingAccountInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['shareAmount', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: CREATE_VESTING_ACCOUNT_DISCRIMINATOR,
    })
  );
}

export function getCreateVestingAccountInstructionDataDecoder(): FixedSizeDecoder<CreateVestingAccountInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['shareAmount', getU64Decoder()],
  ]);
}

export function getCreateVestingAccountInstructionDataCodec(): FixedSizeCodec<
  CreateVestingAccountInstructionDataArgs,
  CreateVestingAccountInstructionData
> {
  return combineCodec(
    getCreateVestingAccountInstructionDataEncoder(),
    getCreateVestingAccountInstructionDataDecoder()
  );
}

export type CreateVestingAccountAsyncInput<
  TAccountCreator extends string = string,
  TAccountBeneficiary extends string = string,
  TAccountPoolState extends string = string,
  TAccountVestingRecord extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /**
   * The account paying for the initialization costs
   * This can be any account with sufficient SOL to cover the transaction
   */
  creator: TransactionSigner<TAccountCreator>;
  beneficiary: Address<TAccountBeneficiary>;
  /** The pool state account */
  poolState: Address<TAccountPoolState>;
  /** The vesting record account */
  vestingRecord?: Address<TAccountVestingRecord>;
  /** Required for account creation */
  systemProgram?: Address<TAccountSystemProgram>;
  shareAmount: CreateVestingAccountInstructionDataArgs['shareAmount'];
};

export async function getCreateVestingAccountInstructionAsync<
  TAccountCreator extends string,
  TAccountBeneficiary extends string,
  TAccountPoolState extends string,
  TAccountVestingRecord extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
>(
  input: CreateVestingAccountAsyncInput<
    TAccountCreator,
    TAccountBeneficiary,
    TAccountPoolState,
    TAccountVestingRecord,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateVestingAccountInstruction<
    TProgramAddress,
    TAccountCreator,
    TAccountBeneficiary,
    TAccountPoolState,
    TAccountVestingRecord,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    creator: { value: input.creator ?? null, isWritable: true },
    beneficiary: { value: input.beneficiary ?? null, isWritable: true },
    poolState: { value: input.poolState ?? null, isWritable: true },
    vestingRecord: { value: input.vestingRecord ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.vestingRecord.value) {
    accounts.vestingRecord.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            112, 111, 111, 108, 95, 118, 101, 115, 116, 105, 110, 103,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.poolState.value)),
        getAddressEncoder().encode(expectAddress(accounts.beneficiary.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.beneficiary),
      getAccountMeta(accounts.poolState),
      getAccountMeta(accounts.vestingRecord),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateVestingAccountInstructionDataEncoder().encode(
      args as CreateVestingAccountInstructionDataArgs
    ),
  } as CreateVestingAccountInstruction<
    TProgramAddress,
    TAccountCreator,
    TAccountBeneficiary,
    TAccountPoolState,
    TAccountVestingRecord,
    TAccountSystemProgram
  >;

  return instruction;
}

export type CreateVestingAccountInput<
  TAccountCreator extends string = string,
  TAccountBeneficiary extends string = string,
  TAccountPoolState extends string = string,
  TAccountVestingRecord extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /**
   * The account paying for the initialization costs
   * This can be any account with sufficient SOL to cover the transaction
   */
  creator: TransactionSigner<TAccountCreator>;
  beneficiary: Address<TAccountBeneficiary>;
  /** The pool state account */
  poolState: Address<TAccountPoolState>;
  /** The vesting record account */
  vestingRecord: Address<TAccountVestingRecord>;
  /** Required for account creation */
  systemProgram?: Address<TAccountSystemProgram>;
  shareAmount: CreateVestingAccountInstructionDataArgs['shareAmount'];
};

export function getCreateVestingAccountInstruction<
  TAccountCreator extends string,
  TAccountBeneficiary extends string,
  TAccountPoolState extends string,
  TAccountVestingRecord extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
>(
  input: CreateVestingAccountInput<
    TAccountCreator,
    TAccountBeneficiary,
    TAccountPoolState,
    TAccountVestingRecord,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateVestingAccountInstruction<
  TProgramAddress,
  TAccountCreator,
  TAccountBeneficiary,
  TAccountPoolState,
  TAccountVestingRecord,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    creator: { value: input.creator ?? null, isWritable: true },
    beneficiary: { value: input.beneficiary ?? null, isWritable: true },
    poolState: { value: input.poolState ?? null, isWritable: true },
    vestingRecord: { value: input.vestingRecord ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.beneficiary),
      getAccountMeta(accounts.poolState),
      getAccountMeta(accounts.vestingRecord),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateVestingAccountInstructionDataEncoder().encode(
      args as CreateVestingAccountInstructionDataArgs
    ),
  } as CreateVestingAccountInstruction<
    TProgramAddress,
    TAccountCreator,
    TAccountBeneficiary,
    TAccountPoolState,
    TAccountVestingRecord,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedCreateVestingAccountInstruction<
  TProgram extends string = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /**
     * The account paying for the initialization costs
     * This can be any account with sufficient SOL to cover the transaction
     */

    creator: TAccountMetas[0];
    beneficiary: TAccountMetas[1];
    /** The pool state account */
    poolState: TAccountMetas[2];
    /** The vesting record account */
    vestingRecord: TAccountMetas[3];
    /** Required for account creation */
    systemProgram: TAccountMetas[4];
  };
  data: CreateVestingAccountInstructionData;
};

export function parseCreateVestingAccountInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateVestingAccountInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      creator: getNextAccount(),
      beneficiary: getNextAccount(),
      poolState: getNextAccount(),
      vestingRecord: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateVestingAccountInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
