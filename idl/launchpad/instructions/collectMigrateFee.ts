/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const COLLECT_MIGRATE_FEE_DISCRIMINATOR = new Uint8Array([
  255, 186, 150, 223, 235, 118, 201, 186,
]);

export function getCollectMigrateFeeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    COLLECT_MIGRATE_FEE_DISCRIMINATOR
  );
}

export type CollectMigrateFeeInstruction<
  TProgram extends string = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountPoolState extends string | AccountMeta<string> = string,
  TAccountGlobalConfig extends string | AccountMeta<string> = string,
  TAccountQuoteVault extends string | AccountMeta<string> = string,
  TAccountQuoteMint extends string | AccountMeta<string> = string,
  TAccountRecipientTokenAccount extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountAuthority extends string
        ? ReadonlyAccount<TAccountAuthority>
        : TAccountAuthority,
      TAccountPoolState extends string
        ? WritableAccount<TAccountPoolState>
        : TAccountPoolState,
      TAccountGlobalConfig extends string
        ? ReadonlyAccount<TAccountGlobalConfig>
        : TAccountGlobalConfig,
      TAccountQuoteVault extends string
        ? WritableAccount<TAccountQuoteVault>
        : TAccountQuoteVault,
      TAccountQuoteMint extends string
        ? ReadonlyAccount<TAccountQuoteMint>
        : TAccountQuoteMint,
      TAccountRecipientTokenAccount extends string
        ? WritableAccount<TAccountRecipientTokenAccount>
        : TAccountRecipientTokenAccount,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CollectMigrateFeeInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type CollectMigrateFeeInstructionDataArgs = {};

export function getCollectMigrateFeeInstructionDataEncoder(): FixedSizeEncoder<CollectMigrateFeeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: COLLECT_MIGRATE_FEE_DISCRIMINATOR })
  );
}

export function getCollectMigrateFeeInstructionDataDecoder(): FixedSizeDecoder<CollectMigrateFeeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCollectMigrateFeeInstructionDataCodec(): FixedSizeCodec<
  CollectMigrateFeeInstructionDataArgs,
  CollectMigrateFeeInstructionData
> {
  return combineCodec(
    getCollectMigrateFeeInstructionDataEncoder(),
    getCollectMigrateFeeInstructionDataDecoder()
  );
}

export type CollectMigrateFeeAsyncInput<
  TAccountOwner extends string = string,
  TAccountAuthority extends string = string,
  TAccountPoolState extends string = string,
  TAccountGlobalConfig extends string = string,
  TAccountQuoteVault extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountRecipientTokenAccount extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  /** Only migrate_fee_owner saved in global_config can collect migrate fee now */
  owner: TransactionSigner<TAccountOwner>;
  authority?: Address<TAccountAuthority>;
  /** Pool state stores accumulated protocol fee amount */
  poolState: Address<TAccountPoolState>;
  /** Global config account stores owner */
  globalConfig: Address<TAccountGlobalConfig>;
  /** The address that holds pool tokens for quote token */
  quoteVault: Address<TAccountQuoteVault>;
  /** The mint of quote token vault */
  quoteMint: Address<TAccountQuoteMint>;
  /** The address that receives the collected quote token fees */
  recipientTokenAccount: Address<TAccountRecipientTokenAccount>;
  /** SPL program for input token transfers */
  tokenProgram?: Address<TAccountTokenProgram>;
};

export async function getCollectMigrateFeeInstructionAsync<
  TAccountOwner extends string,
  TAccountAuthority extends string,
  TAccountPoolState extends string,
  TAccountGlobalConfig extends string,
  TAccountQuoteVault extends string,
  TAccountQuoteMint extends string,
  TAccountRecipientTokenAccount extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
>(
  input: CollectMigrateFeeAsyncInput<
    TAccountOwner,
    TAccountAuthority,
    TAccountPoolState,
    TAccountGlobalConfig,
    TAccountQuoteVault,
    TAccountQuoteMint,
    TAccountRecipientTokenAccount,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CollectMigrateFeeInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountAuthority,
    TAccountPoolState,
    TAccountGlobalConfig,
    TAccountQuoteVault,
    TAccountQuoteMint,
    TAccountRecipientTokenAccount,
    TAccountTokenProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: false },
    poolState: { value: input.poolState ?? null, isWritable: true },
    globalConfig: { value: input.globalConfig ?? null, isWritable: false },
    quoteVault: { value: input.quoteVault ?? null, isWritable: true },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    recipientTokenAccount: {
      value: input.recipientTokenAccount ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.authority.value) {
    accounts.authority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            118, 97, 117, 108, 116, 95, 97, 117, 116, 104, 95, 115, 101, 101,
            100,
          ])
        ),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.poolState),
      getAccountMeta(accounts.globalConfig),
      getAccountMeta(accounts.quoteVault),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.recipientTokenAccount),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getCollectMigrateFeeInstructionDataEncoder().encode({}),
  } as CollectMigrateFeeInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountAuthority,
    TAccountPoolState,
    TAccountGlobalConfig,
    TAccountQuoteVault,
    TAccountQuoteMint,
    TAccountRecipientTokenAccount,
    TAccountTokenProgram
  >;

  return instruction;
}

export type CollectMigrateFeeInput<
  TAccountOwner extends string = string,
  TAccountAuthority extends string = string,
  TAccountPoolState extends string = string,
  TAccountGlobalConfig extends string = string,
  TAccountQuoteVault extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountRecipientTokenAccount extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  /** Only migrate_fee_owner saved in global_config can collect migrate fee now */
  owner: TransactionSigner<TAccountOwner>;
  authority: Address<TAccountAuthority>;
  /** Pool state stores accumulated protocol fee amount */
  poolState: Address<TAccountPoolState>;
  /** Global config account stores owner */
  globalConfig: Address<TAccountGlobalConfig>;
  /** The address that holds pool tokens for quote token */
  quoteVault: Address<TAccountQuoteVault>;
  /** The mint of quote token vault */
  quoteMint: Address<TAccountQuoteMint>;
  /** The address that receives the collected quote token fees */
  recipientTokenAccount: Address<TAccountRecipientTokenAccount>;
  /** SPL program for input token transfers */
  tokenProgram?: Address<TAccountTokenProgram>;
};

export function getCollectMigrateFeeInstruction<
  TAccountOwner extends string,
  TAccountAuthority extends string,
  TAccountPoolState extends string,
  TAccountGlobalConfig extends string,
  TAccountQuoteVault extends string,
  TAccountQuoteMint extends string,
  TAccountRecipientTokenAccount extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
>(
  input: CollectMigrateFeeInput<
    TAccountOwner,
    TAccountAuthority,
    TAccountPoolState,
    TAccountGlobalConfig,
    TAccountQuoteVault,
    TAccountQuoteMint,
    TAccountRecipientTokenAccount,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CollectMigrateFeeInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountAuthority,
  TAccountPoolState,
  TAccountGlobalConfig,
  TAccountQuoteVault,
  TAccountQuoteMint,
  TAccountRecipientTokenAccount,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: false },
    poolState: { value: input.poolState ?? null, isWritable: true },
    globalConfig: { value: input.globalConfig ?? null, isWritable: false },
    quoteVault: { value: input.quoteVault ?? null, isWritable: true },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    recipientTokenAccount: {
      value: input.recipientTokenAccount ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.poolState),
      getAccountMeta(accounts.globalConfig),
      getAccountMeta(accounts.quoteVault),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.recipientTokenAccount),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getCollectMigrateFeeInstructionDataEncoder().encode({}),
  } as CollectMigrateFeeInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountAuthority,
    TAccountPoolState,
    TAccountGlobalConfig,
    TAccountQuoteVault,
    TAccountQuoteMint,
    TAccountRecipientTokenAccount,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedCollectMigrateFeeInstruction<
  TProgram extends string = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Only migrate_fee_owner saved in global_config can collect migrate fee now */
    owner: TAccountMetas[0];
    authority: TAccountMetas[1];
    /** Pool state stores accumulated protocol fee amount */
    poolState: TAccountMetas[2];
    /** Global config account stores owner */
    globalConfig: TAccountMetas[3];
    /** The address that holds pool tokens for quote token */
    quoteVault: TAccountMetas[4];
    /** The mint of quote token vault */
    quoteMint: TAccountMetas[5];
    /** The address that receives the collected quote token fees */
    recipientTokenAccount: TAccountMetas[6];
    /** SPL program for input token transfers */
    tokenProgram: TAccountMetas[7];
  };
  data: CollectMigrateFeeInstructionData;
};

export function parseCollectMigrateFeeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCollectMigrateFeeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      authority: getNextAccount(),
      poolState: getNextAccount(),
      globalConfig: getNextAccount(),
      quoteVault: getNextAccount(),
      quoteMint: getNextAccount(),
      recipientTokenAccount: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getCollectMigrateFeeInstructionDataDecoder().decode(instruction.data),
  };
}
