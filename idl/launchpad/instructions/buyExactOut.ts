/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const BUY_EXACT_OUT_DISCRIMINATOR = new Uint8Array([
  24, 211, 116, 40, 105, 3, 153, 56,
]);

export function getBuyExactOutDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    BUY_EXACT_OUT_DISCRIMINATOR
  );
}

export type BuyExactOutInstruction<
  TProgram extends string = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountGlobalConfig extends string | AccountMeta<string> = string,
  TAccountPlatformConfig extends string | AccountMeta<string> = string,
  TAccountPoolState extends string | AccountMeta<string> = string,
  TAccountUserBaseToken extends string | AccountMeta<string> = string,
  TAccountUserQuoteToken extends string | AccountMeta<string> = string,
  TAccountBaseVault extends string | AccountMeta<string> = string,
  TAccountQuoteVault extends string | AccountMeta<string> = string,
  TAccountBaseTokenMint extends string | AccountMeta<string> = string,
  TAccountQuoteTokenMint extends string | AccountMeta<string> = string,
  TAccountBaseTokenProgram extends string | AccountMeta<string> = string,
  TAccountQuoteTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? ReadonlySignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountAuthority extends string
        ? ReadonlyAccount<TAccountAuthority>
        : TAccountAuthority,
      TAccountGlobalConfig extends string
        ? ReadonlyAccount<TAccountGlobalConfig>
        : TAccountGlobalConfig,
      TAccountPlatformConfig extends string
        ? ReadonlyAccount<TAccountPlatformConfig>
        : TAccountPlatformConfig,
      TAccountPoolState extends string
        ? WritableAccount<TAccountPoolState>
        : TAccountPoolState,
      TAccountUserBaseToken extends string
        ? WritableAccount<TAccountUserBaseToken>
        : TAccountUserBaseToken,
      TAccountUserQuoteToken extends string
        ? WritableAccount<TAccountUserQuoteToken>
        : TAccountUserQuoteToken,
      TAccountBaseVault extends string
        ? WritableAccount<TAccountBaseVault>
        : TAccountBaseVault,
      TAccountQuoteVault extends string
        ? WritableAccount<TAccountQuoteVault>
        : TAccountQuoteVault,
      TAccountBaseTokenMint extends string
        ? ReadonlyAccount<TAccountBaseTokenMint>
        : TAccountBaseTokenMint,
      TAccountQuoteTokenMint extends string
        ? ReadonlyAccount<TAccountQuoteTokenMint>
        : TAccountQuoteTokenMint,
      TAccountBaseTokenProgram extends string
        ? ReadonlyAccount<TAccountBaseTokenProgram>
        : TAccountBaseTokenProgram,
      TAccountQuoteTokenProgram extends string
        ? ReadonlyAccount<TAccountQuoteTokenProgram>
        : TAccountQuoteTokenProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type BuyExactOutInstructionData = {
  discriminator: ReadonlyUint8Array;
  amountOut: bigint;
  maximumAmountIn: bigint;
  shareFeeRate: bigint;
};

export type BuyExactOutInstructionDataArgs = {
  amountOut: number | bigint;
  maximumAmountIn: number | bigint;
  shareFeeRate: number | bigint;
};

export function getBuyExactOutInstructionDataEncoder(): FixedSizeEncoder<BuyExactOutInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amountOut', getU64Encoder()],
      ['maximumAmountIn', getU64Encoder()],
      ['shareFeeRate', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: BUY_EXACT_OUT_DISCRIMINATOR })
  );
}

export function getBuyExactOutInstructionDataDecoder(): FixedSizeDecoder<BuyExactOutInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amountOut', getU64Decoder()],
    ['maximumAmountIn', getU64Decoder()],
    ['shareFeeRate', getU64Decoder()],
  ]);
}

export function getBuyExactOutInstructionDataCodec(): FixedSizeCodec<
  BuyExactOutInstructionDataArgs,
  BuyExactOutInstructionData
> {
  return combineCodec(
    getBuyExactOutInstructionDataEncoder(),
    getBuyExactOutInstructionDataDecoder()
  );
}

export type BuyExactOutAsyncInput<
  TAccountPayer extends string = string,
  TAccountAuthority extends string = string,
  TAccountGlobalConfig extends string = string,
  TAccountPlatformConfig extends string = string,
  TAccountPoolState extends string = string,
  TAccountUserBaseToken extends string = string,
  TAccountUserQuoteToken extends string = string,
  TAccountBaseVault extends string = string,
  TAccountQuoteVault extends string = string,
  TAccountBaseTokenMint extends string = string,
  TAccountQuoteTokenMint extends string = string,
  TAccountBaseTokenProgram extends string = string,
  TAccountQuoteTokenProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  /**
   * The user performing the swap operation
   * Must sign the transaction and pay for fees
   */
  payer: TransactionSigner<TAccountPayer>;
  /**
   * PDA that acts as the authority for pool vault operations
   * Generated using AUTH_SEED
   */
  authority?: Address<TAccountAuthority>;
  /**
   * Global configuration account containing protocol-wide settings
   * Used to read protocol fee rates and curve type
   */
  globalConfig: Address<TAccountGlobalConfig>;
  /**
   * Platform configuration account containing platform-wide settings
   * Used to read platform fee rate
   */
  platformConfig: Address<TAccountPlatformConfig>;
  /**
   * The pool state account where the swap will be performed
   * Contains current pool parameters and balances
   */
  poolState: Address<TAccountPoolState>;
  /**
   * The user's token account for base tokens (tokens being bought)
   * Will receive the output tokens after the swap
   */
  userBaseToken: Address<TAccountUserBaseToken>;
  /**
   * The user's token account for quote tokens (tokens being sold)
   * Will be debited for the input amount
   */
  userQuoteToken: Address<TAccountUserQuoteToken>;
  /**
   * The pool's vault for base tokens
   * Will be debited to send tokens to the user
   */
  baseVault: Address<TAccountBaseVault>;
  /**
   * The pool's vault for quote tokens
   * Will receive the input tokens from the user
   */
  quoteVault: Address<TAccountQuoteVault>;
  /**
   * The mint of the base token
   * Used for transfer fee calculations if applicable
   */
  baseTokenMint: Address<TAccountBaseTokenMint>;
  /** The mint of the quote token */
  quoteTokenMint: Address<TAccountQuoteTokenMint>;
  /** SPL Token program for base token transfers */
  baseTokenProgram: Address<TAccountBaseTokenProgram>;
  /** SPL Token program for quote token transfers */
  quoteTokenProgram?: Address<TAccountQuoteTokenProgram>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  amountOut: BuyExactOutInstructionDataArgs['amountOut'];
  maximumAmountIn: BuyExactOutInstructionDataArgs['maximumAmountIn'];
  shareFeeRate: BuyExactOutInstructionDataArgs['shareFeeRate'];
};

export async function getBuyExactOutInstructionAsync<
  TAccountPayer extends string,
  TAccountAuthority extends string,
  TAccountGlobalConfig extends string,
  TAccountPlatformConfig extends string,
  TAccountPoolState extends string,
  TAccountUserBaseToken extends string,
  TAccountUserQuoteToken extends string,
  TAccountBaseVault extends string,
  TAccountQuoteVault extends string,
  TAccountBaseTokenMint extends string,
  TAccountQuoteTokenMint extends string,
  TAccountBaseTokenProgram extends string,
  TAccountQuoteTokenProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
>(
  input: BuyExactOutAsyncInput<
    TAccountPayer,
    TAccountAuthority,
    TAccountGlobalConfig,
    TAccountPlatformConfig,
    TAccountPoolState,
    TAccountUserBaseToken,
    TAccountUserQuoteToken,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountBaseTokenMint,
    TAccountQuoteTokenMint,
    TAccountBaseTokenProgram,
    TAccountQuoteTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  BuyExactOutInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountAuthority,
    TAccountGlobalConfig,
    TAccountPlatformConfig,
    TAccountPoolState,
    TAccountUserBaseToken,
    TAccountUserQuoteToken,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountBaseTokenMint,
    TAccountQuoteTokenMint,
    TAccountBaseTokenProgram,
    TAccountQuoteTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: false },
    globalConfig: { value: input.globalConfig ?? null, isWritable: false },
    platformConfig: { value: input.platformConfig ?? null, isWritable: false },
    poolState: { value: input.poolState ?? null, isWritable: true },
    userBaseToken: { value: input.userBaseToken ?? null, isWritable: true },
    userQuoteToken: { value: input.userQuoteToken ?? null, isWritable: true },
    baseVault: { value: input.baseVault ?? null, isWritable: true },
    quoteVault: { value: input.quoteVault ?? null, isWritable: true },
    baseTokenMint: { value: input.baseTokenMint ?? null, isWritable: false },
    quoteTokenMint: { value: input.quoteTokenMint ?? null, isWritable: false },
    baseTokenProgram: {
      value: input.baseTokenProgram ?? null,
      isWritable: false,
    },
    quoteTokenProgram: {
      value: input.quoteTokenProgram ?? null,
      isWritable: false,
    },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.authority.value) {
    accounts.authority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            118, 97, 117, 108, 116, 95, 97, 117, 116, 104, 95, 115, 101, 101,
            100,
          ])
        ),
      ],
    });
  }
  if (!accounts.quoteTokenProgram.value) {
    accounts.quoteTokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.globalConfig),
      getAccountMeta(accounts.platformConfig),
      getAccountMeta(accounts.poolState),
      getAccountMeta(accounts.userBaseToken),
      getAccountMeta(accounts.userQuoteToken),
      getAccountMeta(accounts.baseVault),
      getAccountMeta(accounts.quoteVault),
      getAccountMeta(accounts.baseTokenMint),
      getAccountMeta(accounts.quoteTokenMint),
      getAccountMeta(accounts.baseTokenProgram),
      getAccountMeta(accounts.quoteTokenProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getBuyExactOutInstructionDataEncoder().encode(
      args as BuyExactOutInstructionDataArgs
    ),
  } as BuyExactOutInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountAuthority,
    TAccountGlobalConfig,
    TAccountPlatformConfig,
    TAccountPoolState,
    TAccountUserBaseToken,
    TAccountUserQuoteToken,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountBaseTokenMint,
    TAccountQuoteTokenMint,
    TAccountBaseTokenProgram,
    TAccountQuoteTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type BuyExactOutInput<
  TAccountPayer extends string = string,
  TAccountAuthority extends string = string,
  TAccountGlobalConfig extends string = string,
  TAccountPlatformConfig extends string = string,
  TAccountPoolState extends string = string,
  TAccountUserBaseToken extends string = string,
  TAccountUserQuoteToken extends string = string,
  TAccountBaseVault extends string = string,
  TAccountQuoteVault extends string = string,
  TAccountBaseTokenMint extends string = string,
  TAccountQuoteTokenMint extends string = string,
  TAccountBaseTokenProgram extends string = string,
  TAccountQuoteTokenProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  /**
   * The user performing the swap operation
   * Must sign the transaction and pay for fees
   */
  payer: TransactionSigner<TAccountPayer>;
  /**
   * PDA that acts as the authority for pool vault operations
   * Generated using AUTH_SEED
   */
  authority: Address<TAccountAuthority>;
  /**
   * Global configuration account containing protocol-wide settings
   * Used to read protocol fee rates and curve type
   */
  globalConfig: Address<TAccountGlobalConfig>;
  /**
   * Platform configuration account containing platform-wide settings
   * Used to read platform fee rate
   */
  platformConfig: Address<TAccountPlatformConfig>;
  /**
   * The pool state account where the swap will be performed
   * Contains current pool parameters and balances
   */
  poolState: Address<TAccountPoolState>;
  /**
   * The user's token account for base tokens (tokens being bought)
   * Will receive the output tokens after the swap
   */
  userBaseToken: Address<TAccountUserBaseToken>;
  /**
   * The user's token account for quote tokens (tokens being sold)
   * Will be debited for the input amount
   */
  userQuoteToken: Address<TAccountUserQuoteToken>;
  /**
   * The pool's vault for base tokens
   * Will be debited to send tokens to the user
   */
  baseVault: Address<TAccountBaseVault>;
  /**
   * The pool's vault for quote tokens
   * Will receive the input tokens from the user
   */
  quoteVault: Address<TAccountQuoteVault>;
  /**
   * The mint of the base token
   * Used for transfer fee calculations if applicable
   */
  baseTokenMint: Address<TAccountBaseTokenMint>;
  /** The mint of the quote token */
  quoteTokenMint: Address<TAccountQuoteTokenMint>;
  /** SPL Token program for base token transfers */
  baseTokenProgram: Address<TAccountBaseTokenProgram>;
  /** SPL Token program for quote token transfers */
  quoteTokenProgram?: Address<TAccountQuoteTokenProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  amountOut: BuyExactOutInstructionDataArgs['amountOut'];
  maximumAmountIn: BuyExactOutInstructionDataArgs['maximumAmountIn'];
  shareFeeRate: BuyExactOutInstructionDataArgs['shareFeeRate'];
};

export function getBuyExactOutInstruction<
  TAccountPayer extends string,
  TAccountAuthority extends string,
  TAccountGlobalConfig extends string,
  TAccountPlatformConfig extends string,
  TAccountPoolState extends string,
  TAccountUserBaseToken extends string,
  TAccountUserQuoteToken extends string,
  TAccountBaseVault extends string,
  TAccountQuoteVault extends string,
  TAccountBaseTokenMint extends string,
  TAccountQuoteTokenMint extends string,
  TAccountBaseTokenProgram extends string,
  TAccountQuoteTokenProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
>(
  input: BuyExactOutInput<
    TAccountPayer,
    TAccountAuthority,
    TAccountGlobalConfig,
    TAccountPlatformConfig,
    TAccountPoolState,
    TAccountUserBaseToken,
    TAccountUserQuoteToken,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountBaseTokenMint,
    TAccountQuoteTokenMint,
    TAccountBaseTokenProgram,
    TAccountQuoteTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): BuyExactOutInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountAuthority,
  TAccountGlobalConfig,
  TAccountPlatformConfig,
  TAccountPoolState,
  TAccountUserBaseToken,
  TAccountUserQuoteToken,
  TAccountBaseVault,
  TAccountQuoteVault,
  TAccountBaseTokenMint,
  TAccountQuoteTokenMint,
  TAccountBaseTokenProgram,
  TAccountQuoteTokenProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: false },
    globalConfig: { value: input.globalConfig ?? null, isWritable: false },
    platformConfig: { value: input.platformConfig ?? null, isWritable: false },
    poolState: { value: input.poolState ?? null, isWritable: true },
    userBaseToken: { value: input.userBaseToken ?? null, isWritable: true },
    userQuoteToken: { value: input.userQuoteToken ?? null, isWritable: true },
    baseVault: { value: input.baseVault ?? null, isWritable: true },
    quoteVault: { value: input.quoteVault ?? null, isWritable: true },
    baseTokenMint: { value: input.baseTokenMint ?? null, isWritable: false },
    quoteTokenMint: { value: input.quoteTokenMint ?? null, isWritable: false },
    baseTokenProgram: {
      value: input.baseTokenProgram ?? null,
      isWritable: false,
    },
    quoteTokenProgram: {
      value: input.quoteTokenProgram ?? null,
      isWritable: false,
    },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.quoteTokenProgram.value) {
    accounts.quoteTokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.globalConfig),
      getAccountMeta(accounts.platformConfig),
      getAccountMeta(accounts.poolState),
      getAccountMeta(accounts.userBaseToken),
      getAccountMeta(accounts.userQuoteToken),
      getAccountMeta(accounts.baseVault),
      getAccountMeta(accounts.quoteVault),
      getAccountMeta(accounts.baseTokenMint),
      getAccountMeta(accounts.quoteTokenMint),
      getAccountMeta(accounts.baseTokenProgram),
      getAccountMeta(accounts.quoteTokenProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getBuyExactOutInstructionDataEncoder().encode(
      args as BuyExactOutInstructionDataArgs
    ),
  } as BuyExactOutInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountAuthority,
    TAccountGlobalConfig,
    TAccountPlatformConfig,
    TAccountPoolState,
    TAccountUserBaseToken,
    TAccountUserQuoteToken,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountBaseTokenMint,
    TAccountQuoteTokenMint,
    TAccountBaseTokenProgram,
    TAccountQuoteTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type ParsedBuyExactOutInstruction<
  TProgram extends string = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /**
     * The user performing the swap operation
     * Must sign the transaction and pay for fees
     */

    payer: TAccountMetas[0];
    /**
     * PDA that acts as the authority for pool vault operations
     * Generated using AUTH_SEED
     */

    authority: TAccountMetas[1];
    /**
     * Global configuration account containing protocol-wide settings
     * Used to read protocol fee rates and curve type
     */

    globalConfig: TAccountMetas[2];
    /**
     * Platform configuration account containing platform-wide settings
     * Used to read platform fee rate
     */

    platformConfig: TAccountMetas[3];
    /**
     * The pool state account where the swap will be performed
     * Contains current pool parameters and balances
     */

    poolState: TAccountMetas[4];
    /**
     * The user's token account for base tokens (tokens being bought)
     * Will receive the output tokens after the swap
     */

    userBaseToken: TAccountMetas[5];
    /**
     * The user's token account for quote tokens (tokens being sold)
     * Will be debited for the input amount
     */

    userQuoteToken: TAccountMetas[6];
    /**
     * The pool's vault for base tokens
     * Will be debited to send tokens to the user
     */

    baseVault: TAccountMetas[7];
    /**
     * The pool's vault for quote tokens
     * Will receive the input tokens from the user
     */

    quoteVault: TAccountMetas[8];
    /**
     * The mint of the base token
     * Used for transfer fee calculations if applicable
     */

    baseTokenMint: TAccountMetas[9];
    /** The mint of the quote token */
    quoteTokenMint: TAccountMetas[10];
    /** SPL Token program for base token transfers */
    baseTokenProgram: TAccountMetas[11];
    /** SPL Token program for quote token transfers */
    quoteTokenProgram: TAccountMetas[12];
    eventAuthority: TAccountMetas[13];
    program: TAccountMetas[14];
  };
  data: BuyExactOutInstructionData;
};

export function parseBuyExactOutInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedBuyExactOutInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 15) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      authority: getNextAccount(),
      globalConfig: getNextAccount(),
      platformConfig: getNextAccount(),
      poolState: getNextAccount(),
      userBaseToken: getNextAccount(),
      userQuoteToken: getNextAccount(),
      baseVault: getNextAccount(),
      quoteVault: getNextAccount(),
      baseTokenMint: getNextAccount(),
      quoteTokenMint: getNextAccount(),
      baseTokenProgram: getNextAccount(),
      quoteTokenProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getBuyExactOutInstructionDataDecoder().decode(instruction.data),
  };
}
