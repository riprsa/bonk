/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const MIGRATE_TO_CPSWAP_DISCRIMINATOR = new Uint8Array([
  136, 92, 200, 103, 28, 218, 144, 140,
]);

export function getMigrateToCpswapDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    MIGRATE_TO_CPSWAP_DISCRIMINATOR
  );
}

export type MigrateToCpswapInstruction<
  TProgram extends string = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountBaseMint extends string | AccountMeta<string> = string,
  TAccountQuoteMint extends string | AccountMeta<string> = string,
  TAccountPlatformConfig extends string | AccountMeta<string> = string,
  TAccountCpswapProgram extends
    | string
    | AccountMeta<string> = 'CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C',
  TAccountCpswapPool extends string | AccountMeta<string> = string,
  TAccountCpswapAuthority extends string | AccountMeta<string> = string,
  TAccountCpswapLpMint extends string | AccountMeta<string> = string,
  TAccountCpswapBaseVault extends string | AccountMeta<string> = string,
  TAccountCpswapQuoteVault extends string | AccountMeta<string> = string,
  TAccountCpswapConfig extends string | AccountMeta<string> = string,
  TAccountCpswapCreatePoolFee extends string | AccountMeta<string> = string,
  TAccountCpswapObservation extends string | AccountMeta<string> = string,
  TAccountLockProgram extends
    | string
    | AccountMeta<string> = 'LockrWmn6K5twhz3y9w1dQERbmgSaRkfnTeTKbpofwE',
  TAccountLockAuthority extends string | AccountMeta<string> = string,
  TAccountLockLpVault extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountPoolState extends string | AccountMeta<string> = string,
  TAccountGlobalConfig extends string | AccountMeta<string> = string,
  TAccountBaseVault extends string | AccountMeta<string> = string,
  TAccountQuoteVault extends string | AccountMeta<string> = string,
  TAccountPoolLpToken extends string | AccountMeta<string> = string,
  TAccountBaseTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountQuoteTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountRentProgram extends
    | string
    | AccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TAccountMetadataProgram extends
    | string
    | AccountMeta<string> = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountBaseMint extends string
        ? ReadonlyAccount<TAccountBaseMint>
        : TAccountBaseMint,
      TAccountQuoteMint extends string
        ? ReadonlyAccount<TAccountQuoteMint>
        : TAccountQuoteMint,
      TAccountPlatformConfig extends string
        ? ReadonlyAccount<TAccountPlatformConfig>
        : TAccountPlatformConfig,
      TAccountCpswapProgram extends string
        ? ReadonlyAccount<TAccountCpswapProgram>
        : TAccountCpswapProgram,
      TAccountCpswapPool extends string
        ? WritableAccount<TAccountCpswapPool>
        : TAccountCpswapPool,
      TAccountCpswapAuthority extends string
        ? ReadonlyAccount<TAccountCpswapAuthority>
        : TAccountCpswapAuthority,
      TAccountCpswapLpMint extends string
        ? WritableAccount<TAccountCpswapLpMint>
        : TAccountCpswapLpMint,
      TAccountCpswapBaseVault extends string
        ? WritableAccount<TAccountCpswapBaseVault>
        : TAccountCpswapBaseVault,
      TAccountCpswapQuoteVault extends string
        ? WritableAccount<TAccountCpswapQuoteVault>
        : TAccountCpswapQuoteVault,
      TAccountCpswapConfig extends string
        ? ReadonlyAccount<TAccountCpswapConfig>
        : TAccountCpswapConfig,
      TAccountCpswapCreatePoolFee extends string
        ? WritableAccount<TAccountCpswapCreatePoolFee>
        : TAccountCpswapCreatePoolFee,
      TAccountCpswapObservation extends string
        ? WritableAccount<TAccountCpswapObservation>
        : TAccountCpswapObservation,
      TAccountLockProgram extends string
        ? ReadonlyAccount<TAccountLockProgram>
        : TAccountLockProgram,
      TAccountLockAuthority extends string
        ? ReadonlyAccount<TAccountLockAuthority>
        : TAccountLockAuthority,
      TAccountLockLpVault extends string
        ? WritableAccount<TAccountLockLpVault>
        : TAccountLockLpVault,
      TAccountAuthority extends string
        ? WritableAccount<TAccountAuthority>
        : TAccountAuthority,
      TAccountPoolState extends string
        ? WritableAccount<TAccountPoolState>
        : TAccountPoolState,
      TAccountGlobalConfig extends string
        ? ReadonlyAccount<TAccountGlobalConfig>
        : TAccountGlobalConfig,
      TAccountBaseVault extends string
        ? WritableAccount<TAccountBaseVault>
        : TAccountBaseVault,
      TAccountQuoteVault extends string
        ? WritableAccount<TAccountQuoteVault>
        : TAccountQuoteVault,
      TAccountPoolLpToken extends string
        ? WritableAccount<TAccountPoolLpToken>
        : TAccountPoolLpToken,
      TAccountBaseTokenProgram extends string
        ? ReadonlyAccount<TAccountBaseTokenProgram>
        : TAccountBaseTokenProgram,
      TAccountQuoteTokenProgram extends string
        ? ReadonlyAccount<TAccountQuoteTokenProgram>
        : TAccountQuoteTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRentProgram extends string
        ? ReadonlyAccount<TAccountRentProgram>
        : TAccountRentProgram,
      TAccountMetadataProgram extends string
        ? ReadonlyAccount<TAccountMetadataProgram>
        : TAccountMetadataProgram,
      ...TRemainingAccounts,
    ]
  >;

export type MigrateToCpswapInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type MigrateToCpswapInstructionDataArgs = {};

export function getMigrateToCpswapInstructionDataEncoder(): FixedSizeEncoder<MigrateToCpswapInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: MIGRATE_TO_CPSWAP_DISCRIMINATOR })
  );
}

export function getMigrateToCpswapInstructionDataDecoder(): FixedSizeDecoder<MigrateToCpswapInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getMigrateToCpswapInstructionDataCodec(): FixedSizeCodec<
  MigrateToCpswapInstructionDataArgs,
  MigrateToCpswapInstructionData
> {
  return combineCodec(
    getMigrateToCpswapInstructionDataEncoder(),
    getMigrateToCpswapInstructionDataDecoder()
  );
}

export type MigrateToCpswapAsyncInput<
  TAccountPayer extends string = string,
  TAccountBaseMint extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountPlatformConfig extends string = string,
  TAccountCpswapProgram extends string = string,
  TAccountCpswapPool extends string = string,
  TAccountCpswapAuthority extends string = string,
  TAccountCpswapLpMint extends string = string,
  TAccountCpswapBaseVault extends string = string,
  TAccountCpswapQuoteVault extends string = string,
  TAccountCpswapConfig extends string = string,
  TAccountCpswapCreatePoolFee extends string = string,
  TAccountCpswapObservation extends string = string,
  TAccountLockProgram extends string = string,
  TAccountLockAuthority extends string = string,
  TAccountLockLpVault extends string = string,
  TAccountAuthority extends string = string,
  TAccountPoolState extends string = string,
  TAccountGlobalConfig extends string = string,
  TAccountBaseVault extends string = string,
  TAccountQuoteVault extends string = string,
  TAccountPoolLpToken extends string = string,
  TAccountBaseTokenProgram extends string = string,
  TAccountQuoteTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRentProgram extends string = string,
  TAccountMetadataProgram extends string = string,
> = {
  /**
   * Only migrate_to_cpswap_wallet can migrate to cpswap pool
   * This signer must match the migrate_to_cpswap_wallet saved in global_config
   */
  payer: TransactionSigner<TAccountPayer>;
  /** The mint for the base token (token being sold) */
  baseMint: Address<TAccountBaseMint>;
  /** The mint for the quote token (token used to buy) */
  quoteMint: Address<TAccountQuoteMint>;
  /**
   * Platform configuration account containing platform-wide settings
   * Used to read platform fee rate
   */
  platformConfig: Address<TAccountPlatformConfig>;
  cpswapProgram?: Address<TAccountCpswapProgram>;
  /**
   * PDA account:
   * seeds = [
   * b"pool",
   * cpswap_config.key().as_ref(),
   * token_0_mint.key().as_ref(),
   * token_1_mint.key().as_ref(),
   * ],
   * seeds::program = cpswap_program,
   *
   * Or random account: must be signed by cli
   */
  cpswapPool: Address<TAccountCpswapPool>;
  cpswapAuthority?: Address<TAccountCpswapAuthority>;
  cpswapLpMint?: Address<TAccountCpswapLpMint>;
  cpswapBaseVault?: Address<TAccountCpswapBaseVault>;
  cpswapQuoteVault?: Address<TAccountCpswapQuoteVault>;
  cpswapConfig: Address<TAccountCpswapConfig>;
  cpswapCreatePoolFee: Address<TAccountCpswapCreatePoolFee>;
  cpswapObservation?: Address<TAccountCpswapObservation>;
  lockProgram?: Address<TAccountLockProgram>;
  lockAuthority?: Address<TAccountLockAuthority>;
  lockLpVault: Address<TAccountLockLpVault>;
  /**
   * PDA that acts as the authority for pool vault operations
   * Generated using AUTH_SEED
   */
  authority?: Address<TAccountAuthority>;
  /**
   * Account that stores the pool's state and parameters
   * PDA generated using POOL_SEED and both token mints
   */
  poolState?: Address<TAccountPoolState>;
  /** Global config account stores owner */
  globalConfig: Address<TAccountGlobalConfig>;
  /**
   * The pool's vault for base tokens
   * Will be fully drained during migration
   */
  baseVault: Address<TAccountBaseVault>;
  /**
   * The pool's vault for quote tokens
   * Will be fully drained during migration
   */
  quoteVault: Address<TAccountQuoteVault>;
  poolLpToken: Address<TAccountPoolLpToken>;
  /**
   * SPL Token program for the base token
   * Must be the standard Token program
   */
  baseTokenProgram?: Address<TAccountBaseTokenProgram>;
  /** SPL Token program for the quote token */
  quoteTokenProgram?: Address<TAccountQuoteTokenProgram>;
  /** Program to create an ATA for receiving fee NFT */
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  /** Required for account creation */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Required for rent exempt calculations */
  rentProgram?: Address<TAccountRentProgram>;
  /** Program to create NFT metadata accunt */
  metadataProgram?: Address<TAccountMetadataProgram>;
};

export async function getMigrateToCpswapInstructionAsync<
  TAccountPayer extends string,
  TAccountBaseMint extends string,
  TAccountQuoteMint extends string,
  TAccountPlatformConfig extends string,
  TAccountCpswapProgram extends string,
  TAccountCpswapPool extends string,
  TAccountCpswapAuthority extends string,
  TAccountCpswapLpMint extends string,
  TAccountCpswapBaseVault extends string,
  TAccountCpswapQuoteVault extends string,
  TAccountCpswapConfig extends string,
  TAccountCpswapCreatePoolFee extends string,
  TAccountCpswapObservation extends string,
  TAccountLockProgram extends string,
  TAccountLockAuthority extends string,
  TAccountLockLpVault extends string,
  TAccountAuthority extends string,
  TAccountPoolState extends string,
  TAccountGlobalConfig extends string,
  TAccountBaseVault extends string,
  TAccountQuoteVault extends string,
  TAccountPoolLpToken extends string,
  TAccountBaseTokenProgram extends string,
  TAccountQuoteTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountRentProgram extends string,
  TAccountMetadataProgram extends string,
  TProgramAddress extends Address = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
>(
  input: MigrateToCpswapAsyncInput<
    TAccountPayer,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountPlatformConfig,
    TAccountCpswapProgram,
    TAccountCpswapPool,
    TAccountCpswapAuthority,
    TAccountCpswapLpMint,
    TAccountCpswapBaseVault,
    TAccountCpswapQuoteVault,
    TAccountCpswapConfig,
    TAccountCpswapCreatePoolFee,
    TAccountCpswapObservation,
    TAccountLockProgram,
    TAccountLockAuthority,
    TAccountLockLpVault,
    TAccountAuthority,
    TAccountPoolState,
    TAccountGlobalConfig,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountPoolLpToken,
    TAccountBaseTokenProgram,
    TAccountQuoteTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRentProgram,
    TAccountMetadataProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  MigrateToCpswapInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountPlatformConfig,
    TAccountCpswapProgram,
    TAccountCpswapPool,
    TAccountCpswapAuthority,
    TAccountCpswapLpMint,
    TAccountCpswapBaseVault,
    TAccountCpswapQuoteVault,
    TAccountCpswapConfig,
    TAccountCpswapCreatePoolFee,
    TAccountCpswapObservation,
    TAccountLockProgram,
    TAccountLockAuthority,
    TAccountLockLpVault,
    TAccountAuthority,
    TAccountPoolState,
    TAccountGlobalConfig,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountPoolLpToken,
    TAccountBaseTokenProgram,
    TAccountQuoteTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRentProgram,
    TAccountMetadataProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    baseMint: { value: input.baseMint ?? null, isWritable: false },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    platformConfig: { value: input.platformConfig ?? null, isWritable: false },
    cpswapProgram: { value: input.cpswapProgram ?? null, isWritable: false },
    cpswapPool: { value: input.cpswapPool ?? null, isWritable: true },
    cpswapAuthority: {
      value: input.cpswapAuthority ?? null,
      isWritable: false,
    },
    cpswapLpMint: { value: input.cpswapLpMint ?? null, isWritable: true },
    cpswapBaseVault: { value: input.cpswapBaseVault ?? null, isWritable: true },
    cpswapQuoteVault: {
      value: input.cpswapQuoteVault ?? null,
      isWritable: true,
    },
    cpswapConfig: { value: input.cpswapConfig ?? null, isWritable: false },
    cpswapCreatePoolFee: {
      value: input.cpswapCreatePoolFee ?? null,
      isWritable: true,
    },
    cpswapObservation: {
      value: input.cpswapObservation ?? null,
      isWritable: true,
    },
    lockProgram: { value: input.lockProgram ?? null, isWritable: false },
    lockAuthority: { value: input.lockAuthority ?? null, isWritable: false },
    lockLpVault: { value: input.lockLpVault ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: true },
    poolState: { value: input.poolState ?? null, isWritable: true },
    globalConfig: { value: input.globalConfig ?? null, isWritable: false },
    baseVault: { value: input.baseVault ?? null, isWritable: true },
    quoteVault: { value: input.quoteVault ?? null, isWritable: true },
    poolLpToken: { value: input.poolLpToken ?? null, isWritable: true },
    baseTokenProgram: {
      value: input.baseTokenProgram ?? null,
      isWritable: false,
    },
    quoteTokenProgram: {
      value: input.quoteTokenProgram ?? null,
      isWritable: false,
    },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rentProgram: { value: input.rentProgram ?? null, isWritable: false },
    metadataProgram: {
      value: input.metadataProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.cpswapProgram.value) {
    accounts.cpswapProgram.value =
      'CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C' as Address<'CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C'>;
  }
  if (!accounts.cpswapAuthority.value) {
    accounts.cpswapAuthority.value = await getProgramDerivedAddress({
      programAddress:
        'CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C' as Address<'CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C'>,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            118, 97, 117, 108, 116, 95, 97, 110, 100, 95, 108, 112, 95, 109,
            105, 110, 116, 95, 97, 117, 116, 104, 95, 115, 101, 101, 100,
          ])
        ),
      ],
    });
  }
  if (!accounts.cpswapLpMint.value) {
    accounts.cpswapLpMint.value = await getProgramDerivedAddress({
      programAddress:
        'CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C' as Address<'CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C'>,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            112, 111, 111, 108, 95, 108, 112, 95, 109, 105, 110, 116,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.cpswapPool.value)),
      ],
    });
  }
  if (!accounts.cpswapBaseVault.value) {
    accounts.cpswapBaseVault.value = await getProgramDerivedAddress({
      programAddress:
        'CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C' as Address<'CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C'>,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([112, 111, 111, 108, 95, 118, 97, 117, 108, 116])
        ),
        getAddressEncoder().encode(expectAddress(accounts.cpswapPool.value)),
        getAddressEncoder().encode(expectAddress(accounts.baseMint.value)),
      ],
    });
  }
  if (!accounts.cpswapQuoteVault.value) {
    accounts.cpswapQuoteVault.value = await getProgramDerivedAddress({
      programAddress:
        'CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C' as Address<'CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C'>,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([112, 111, 111, 108, 95, 118, 97, 117, 108, 116])
        ),
        getAddressEncoder().encode(expectAddress(accounts.cpswapPool.value)),
        getAddressEncoder().encode(expectAddress(accounts.quoteMint.value)),
      ],
    });
  }
  if (!accounts.cpswapObservation.value) {
    accounts.cpswapObservation.value = await getProgramDerivedAddress({
      programAddress:
        'CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C' as Address<'CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C'>,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([111, 98, 115, 101, 114, 118, 97, 116, 105, 111, 110])
        ),
        getAddressEncoder().encode(expectAddress(accounts.cpswapPool.value)),
      ],
    });
  }
  if (!accounts.lockProgram.value) {
    accounts.lockProgram.value =
      'LockrWmn6K5twhz3y9w1dQERbmgSaRkfnTeTKbpofwE' as Address<'LockrWmn6K5twhz3y9w1dQERbmgSaRkfnTeTKbpofwE'>;
  }
  if (!accounts.lockAuthority.value) {
    accounts.lockAuthority.value = await getProgramDerivedAddress({
      programAddress:
        'LockrWmn6K5twhz3y9w1dQERbmgSaRkfnTeTKbpofwE' as Address<'LockrWmn6K5twhz3y9w1dQERbmgSaRkfnTeTKbpofwE'>,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            108, 111, 99, 107, 95, 99, 112, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121, 95, 115, 101, 101, 100,
          ])
        ),
      ],
    });
  }
  if (!accounts.authority.value) {
    accounts.authority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            118, 97, 117, 108, 116, 95, 97, 117, 116, 104, 95, 115, 101, 101,
            100,
          ])
        ),
      ],
    });
  }
  if (!accounts.poolState.value) {
    accounts.poolState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([112, 111, 111, 108])),
        getAddressEncoder().encode(expectAddress(accounts.baseMint.value)),
        getAddressEncoder().encode(expectAddress(accounts.quoteMint.value)),
      ],
    });
  }
  if (!accounts.baseTokenProgram.value) {
    accounts.baseTokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.quoteTokenProgram.value) {
    accounts.quoteTokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rentProgram.value) {
    accounts.rentProgram.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }
  if (!accounts.metadataProgram.value) {
    accounts.metadataProgram.value =
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.baseMint),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.platformConfig),
      getAccountMeta(accounts.cpswapProgram),
      getAccountMeta(accounts.cpswapPool),
      getAccountMeta(accounts.cpswapAuthority),
      getAccountMeta(accounts.cpswapLpMint),
      getAccountMeta(accounts.cpswapBaseVault),
      getAccountMeta(accounts.cpswapQuoteVault),
      getAccountMeta(accounts.cpswapConfig),
      getAccountMeta(accounts.cpswapCreatePoolFee),
      getAccountMeta(accounts.cpswapObservation),
      getAccountMeta(accounts.lockProgram),
      getAccountMeta(accounts.lockAuthority),
      getAccountMeta(accounts.lockLpVault),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.poolState),
      getAccountMeta(accounts.globalConfig),
      getAccountMeta(accounts.baseVault),
      getAccountMeta(accounts.quoteVault),
      getAccountMeta(accounts.poolLpToken),
      getAccountMeta(accounts.baseTokenProgram),
      getAccountMeta(accounts.quoteTokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rentProgram),
      getAccountMeta(accounts.metadataProgram),
    ],
    programAddress,
    data: getMigrateToCpswapInstructionDataEncoder().encode({}),
  } as MigrateToCpswapInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountPlatformConfig,
    TAccountCpswapProgram,
    TAccountCpswapPool,
    TAccountCpswapAuthority,
    TAccountCpswapLpMint,
    TAccountCpswapBaseVault,
    TAccountCpswapQuoteVault,
    TAccountCpswapConfig,
    TAccountCpswapCreatePoolFee,
    TAccountCpswapObservation,
    TAccountLockProgram,
    TAccountLockAuthority,
    TAccountLockLpVault,
    TAccountAuthority,
    TAccountPoolState,
    TAccountGlobalConfig,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountPoolLpToken,
    TAccountBaseTokenProgram,
    TAccountQuoteTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRentProgram,
    TAccountMetadataProgram
  >;

  return instruction;
}

export type MigrateToCpswapInput<
  TAccountPayer extends string = string,
  TAccountBaseMint extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountPlatformConfig extends string = string,
  TAccountCpswapProgram extends string = string,
  TAccountCpswapPool extends string = string,
  TAccountCpswapAuthority extends string = string,
  TAccountCpswapLpMint extends string = string,
  TAccountCpswapBaseVault extends string = string,
  TAccountCpswapQuoteVault extends string = string,
  TAccountCpswapConfig extends string = string,
  TAccountCpswapCreatePoolFee extends string = string,
  TAccountCpswapObservation extends string = string,
  TAccountLockProgram extends string = string,
  TAccountLockAuthority extends string = string,
  TAccountLockLpVault extends string = string,
  TAccountAuthority extends string = string,
  TAccountPoolState extends string = string,
  TAccountGlobalConfig extends string = string,
  TAccountBaseVault extends string = string,
  TAccountQuoteVault extends string = string,
  TAccountPoolLpToken extends string = string,
  TAccountBaseTokenProgram extends string = string,
  TAccountQuoteTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRentProgram extends string = string,
  TAccountMetadataProgram extends string = string,
> = {
  /**
   * Only migrate_to_cpswap_wallet can migrate to cpswap pool
   * This signer must match the migrate_to_cpswap_wallet saved in global_config
   */
  payer: TransactionSigner<TAccountPayer>;
  /** The mint for the base token (token being sold) */
  baseMint: Address<TAccountBaseMint>;
  /** The mint for the quote token (token used to buy) */
  quoteMint: Address<TAccountQuoteMint>;
  /**
   * Platform configuration account containing platform-wide settings
   * Used to read platform fee rate
   */
  platformConfig: Address<TAccountPlatformConfig>;
  cpswapProgram?: Address<TAccountCpswapProgram>;
  /**
   * PDA account:
   * seeds = [
   * b"pool",
   * cpswap_config.key().as_ref(),
   * token_0_mint.key().as_ref(),
   * token_1_mint.key().as_ref(),
   * ],
   * seeds::program = cpswap_program,
   *
   * Or random account: must be signed by cli
   */
  cpswapPool: Address<TAccountCpswapPool>;
  cpswapAuthority: Address<TAccountCpswapAuthority>;
  cpswapLpMint: Address<TAccountCpswapLpMint>;
  cpswapBaseVault: Address<TAccountCpswapBaseVault>;
  cpswapQuoteVault: Address<TAccountCpswapQuoteVault>;
  cpswapConfig: Address<TAccountCpswapConfig>;
  cpswapCreatePoolFee: Address<TAccountCpswapCreatePoolFee>;
  cpswapObservation: Address<TAccountCpswapObservation>;
  lockProgram?: Address<TAccountLockProgram>;
  lockAuthority: Address<TAccountLockAuthority>;
  lockLpVault: Address<TAccountLockLpVault>;
  /**
   * PDA that acts as the authority for pool vault operations
   * Generated using AUTH_SEED
   */
  authority: Address<TAccountAuthority>;
  /**
   * Account that stores the pool's state and parameters
   * PDA generated using POOL_SEED and both token mints
   */
  poolState: Address<TAccountPoolState>;
  /** Global config account stores owner */
  globalConfig: Address<TAccountGlobalConfig>;
  /**
   * The pool's vault for base tokens
   * Will be fully drained during migration
   */
  baseVault: Address<TAccountBaseVault>;
  /**
   * The pool's vault for quote tokens
   * Will be fully drained during migration
   */
  quoteVault: Address<TAccountQuoteVault>;
  poolLpToken: Address<TAccountPoolLpToken>;
  /**
   * SPL Token program for the base token
   * Must be the standard Token program
   */
  baseTokenProgram?: Address<TAccountBaseTokenProgram>;
  /** SPL Token program for the quote token */
  quoteTokenProgram?: Address<TAccountQuoteTokenProgram>;
  /** Program to create an ATA for receiving fee NFT */
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  /** Required for account creation */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Required for rent exempt calculations */
  rentProgram?: Address<TAccountRentProgram>;
  /** Program to create NFT metadata accunt */
  metadataProgram?: Address<TAccountMetadataProgram>;
};

export function getMigrateToCpswapInstruction<
  TAccountPayer extends string,
  TAccountBaseMint extends string,
  TAccountQuoteMint extends string,
  TAccountPlatformConfig extends string,
  TAccountCpswapProgram extends string,
  TAccountCpswapPool extends string,
  TAccountCpswapAuthority extends string,
  TAccountCpswapLpMint extends string,
  TAccountCpswapBaseVault extends string,
  TAccountCpswapQuoteVault extends string,
  TAccountCpswapConfig extends string,
  TAccountCpswapCreatePoolFee extends string,
  TAccountCpswapObservation extends string,
  TAccountLockProgram extends string,
  TAccountLockAuthority extends string,
  TAccountLockLpVault extends string,
  TAccountAuthority extends string,
  TAccountPoolState extends string,
  TAccountGlobalConfig extends string,
  TAccountBaseVault extends string,
  TAccountQuoteVault extends string,
  TAccountPoolLpToken extends string,
  TAccountBaseTokenProgram extends string,
  TAccountQuoteTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountRentProgram extends string,
  TAccountMetadataProgram extends string,
  TProgramAddress extends Address = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
>(
  input: MigrateToCpswapInput<
    TAccountPayer,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountPlatformConfig,
    TAccountCpswapProgram,
    TAccountCpswapPool,
    TAccountCpswapAuthority,
    TAccountCpswapLpMint,
    TAccountCpswapBaseVault,
    TAccountCpswapQuoteVault,
    TAccountCpswapConfig,
    TAccountCpswapCreatePoolFee,
    TAccountCpswapObservation,
    TAccountLockProgram,
    TAccountLockAuthority,
    TAccountLockLpVault,
    TAccountAuthority,
    TAccountPoolState,
    TAccountGlobalConfig,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountPoolLpToken,
    TAccountBaseTokenProgram,
    TAccountQuoteTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRentProgram,
    TAccountMetadataProgram
  >,
  config?: { programAddress?: TProgramAddress }
): MigrateToCpswapInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountBaseMint,
  TAccountQuoteMint,
  TAccountPlatformConfig,
  TAccountCpswapProgram,
  TAccountCpswapPool,
  TAccountCpswapAuthority,
  TAccountCpswapLpMint,
  TAccountCpswapBaseVault,
  TAccountCpswapQuoteVault,
  TAccountCpswapConfig,
  TAccountCpswapCreatePoolFee,
  TAccountCpswapObservation,
  TAccountLockProgram,
  TAccountLockAuthority,
  TAccountLockLpVault,
  TAccountAuthority,
  TAccountPoolState,
  TAccountGlobalConfig,
  TAccountBaseVault,
  TAccountQuoteVault,
  TAccountPoolLpToken,
  TAccountBaseTokenProgram,
  TAccountQuoteTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountSystemProgram,
  TAccountRentProgram,
  TAccountMetadataProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    baseMint: { value: input.baseMint ?? null, isWritable: false },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    platformConfig: { value: input.platformConfig ?? null, isWritable: false },
    cpswapProgram: { value: input.cpswapProgram ?? null, isWritable: false },
    cpswapPool: { value: input.cpswapPool ?? null, isWritable: true },
    cpswapAuthority: {
      value: input.cpswapAuthority ?? null,
      isWritable: false,
    },
    cpswapLpMint: { value: input.cpswapLpMint ?? null, isWritable: true },
    cpswapBaseVault: { value: input.cpswapBaseVault ?? null, isWritable: true },
    cpswapQuoteVault: {
      value: input.cpswapQuoteVault ?? null,
      isWritable: true,
    },
    cpswapConfig: { value: input.cpswapConfig ?? null, isWritable: false },
    cpswapCreatePoolFee: {
      value: input.cpswapCreatePoolFee ?? null,
      isWritable: true,
    },
    cpswapObservation: {
      value: input.cpswapObservation ?? null,
      isWritable: true,
    },
    lockProgram: { value: input.lockProgram ?? null, isWritable: false },
    lockAuthority: { value: input.lockAuthority ?? null, isWritable: false },
    lockLpVault: { value: input.lockLpVault ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: true },
    poolState: { value: input.poolState ?? null, isWritable: true },
    globalConfig: { value: input.globalConfig ?? null, isWritable: false },
    baseVault: { value: input.baseVault ?? null, isWritable: true },
    quoteVault: { value: input.quoteVault ?? null, isWritable: true },
    poolLpToken: { value: input.poolLpToken ?? null, isWritable: true },
    baseTokenProgram: {
      value: input.baseTokenProgram ?? null,
      isWritable: false,
    },
    quoteTokenProgram: {
      value: input.quoteTokenProgram ?? null,
      isWritable: false,
    },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rentProgram: { value: input.rentProgram ?? null, isWritable: false },
    metadataProgram: {
      value: input.metadataProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.cpswapProgram.value) {
    accounts.cpswapProgram.value =
      'CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C' as Address<'CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C'>;
  }
  if (!accounts.lockProgram.value) {
    accounts.lockProgram.value =
      'LockrWmn6K5twhz3y9w1dQERbmgSaRkfnTeTKbpofwE' as Address<'LockrWmn6K5twhz3y9w1dQERbmgSaRkfnTeTKbpofwE'>;
  }
  if (!accounts.baseTokenProgram.value) {
    accounts.baseTokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.quoteTokenProgram.value) {
    accounts.quoteTokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rentProgram.value) {
    accounts.rentProgram.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }
  if (!accounts.metadataProgram.value) {
    accounts.metadataProgram.value =
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.baseMint),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.platformConfig),
      getAccountMeta(accounts.cpswapProgram),
      getAccountMeta(accounts.cpswapPool),
      getAccountMeta(accounts.cpswapAuthority),
      getAccountMeta(accounts.cpswapLpMint),
      getAccountMeta(accounts.cpswapBaseVault),
      getAccountMeta(accounts.cpswapQuoteVault),
      getAccountMeta(accounts.cpswapConfig),
      getAccountMeta(accounts.cpswapCreatePoolFee),
      getAccountMeta(accounts.cpswapObservation),
      getAccountMeta(accounts.lockProgram),
      getAccountMeta(accounts.lockAuthority),
      getAccountMeta(accounts.lockLpVault),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.poolState),
      getAccountMeta(accounts.globalConfig),
      getAccountMeta(accounts.baseVault),
      getAccountMeta(accounts.quoteVault),
      getAccountMeta(accounts.poolLpToken),
      getAccountMeta(accounts.baseTokenProgram),
      getAccountMeta(accounts.quoteTokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rentProgram),
      getAccountMeta(accounts.metadataProgram),
    ],
    programAddress,
    data: getMigrateToCpswapInstructionDataEncoder().encode({}),
  } as MigrateToCpswapInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountPlatformConfig,
    TAccountCpswapProgram,
    TAccountCpswapPool,
    TAccountCpswapAuthority,
    TAccountCpswapLpMint,
    TAccountCpswapBaseVault,
    TAccountCpswapQuoteVault,
    TAccountCpswapConfig,
    TAccountCpswapCreatePoolFee,
    TAccountCpswapObservation,
    TAccountLockProgram,
    TAccountLockAuthority,
    TAccountLockLpVault,
    TAccountAuthority,
    TAccountPoolState,
    TAccountGlobalConfig,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountPoolLpToken,
    TAccountBaseTokenProgram,
    TAccountQuoteTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRentProgram,
    TAccountMetadataProgram
  >;

  return instruction;
}

export type ParsedMigrateToCpswapInstruction<
  TProgram extends string = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /**
     * Only migrate_to_cpswap_wallet can migrate to cpswap pool
     * This signer must match the migrate_to_cpswap_wallet saved in global_config
     */

    payer: TAccountMetas[0];
    /** The mint for the base token (token being sold) */
    baseMint: TAccountMetas[1];
    /** The mint for the quote token (token used to buy) */
    quoteMint: TAccountMetas[2];
    /**
     * Platform configuration account containing platform-wide settings
     * Used to read platform fee rate
     */

    platformConfig: TAccountMetas[3];
    cpswapProgram: TAccountMetas[4];
    /**
     * PDA account:
     * seeds = [
     * b"pool",
     * cpswap_config.key().as_ref(),
     * token_0_mint.key().as_ref(),
     * token_1_mint.key().as_ref(),
     * ],
     * seeds::program = cpswap_program,
     *
     * Or random account: must be signed by cli
     */

    cpswapPool: TAccountMetas[5];
    cpswapAuthority: TAccountMetas[6];
    cpswapLpMint: TAccountMetas[7];
    cpswapBaseVault: TAccountMetas[8];
    cpswapQuoteVault: TAccountMetas[9];
    cpswapConfig: TAccountMetas[10];
    cpswapCreatePoolFee: TAccountMetas[11];
    cpswapObservation: TAccountMetas[12];
    lockProgram: TAccountMetas[13];
    lockAuthority: TAccountMetas[14];
    lockLpVault: TAccountMetas[15];
    /**
     * PDA that acts as the authority for pool vault operations
     * Generated using AUTH_SEED
     */

    authority: TAccountMetas[16];
    /**
     * Account that stores the pool's state and parameters
     * PDA generated using POOL_SEED and both token mints
     */

    poolState: TAccountMetas[17];
    /** Global config account stores owner */
    globalConfig: TAccountMetas[18];
    /**
     * The pool's vault for base tokens
     * Will be fully drained during migration
     */

    baseVault: TAccountMetas[19];
    /**
     * The pool's vault for quote tokens
     * Will be fully drained during migration
     */

    quoteVault: TAccountMetas[20];
    poolLpToken: TAccountMetas[21];
    /**
     * SPL Token program for the base token
     * Must be the standard Token program
     */

    baseTokenProgram: TAccountMetas[22];
    /** SPL Token program for the quote token */
    quoteTokenProgram: TAccountMetas[23];
    /** Program to create an ATA for receiving fee NFT */
    associatedTokenProgram: TAccountMetas[24];
    /** Required for account creation */
    systemProgram: TAccountMetas[25];
    /** Required for rent exempt calculations */
    rentProgram: TAccountMetas[26];
    /** Program to create NFT metadata accunt */
    metadataProgram: TAccountMetas[27];
  };
  data: MigrateToCpswapInstructionData;
};

export function parseMigrateToCpswapInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedMigrateToCpswapInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 28) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      baseMint: getNextAccount(),
      quoteMint: getNextAccount(),
      platformConfig: getNextAccount(),
      cpswapProgram: getNextAccount(),
      cpswapPool: getNextAccount(),
      cpswapAuthority: getNextAccount(),
      cpswapLpMint: getNextAccount(),
      cpswapBaseVault: getNextAccount(),
      cpswapQuoteVault: getNextAccount(),
      cpswapConfig: getNextAccount(),
      cpswapCreatePoolFee: getNextAccount(),
      cpswapObservation: getNextAccount(),
      lockProgram: getNextAccount(),
      lockAuthority: getNextAccount(),
      lockLpVault: getNextAccount(),
      authority: getNextAccount(),
      poolState: getNextAccount(),
      globalConfig: getNextAccount(),
      baseVault: getNextAccount(),
      quoteVault: getNextAccount(),
      poolLpToken: getNextAccount(),
      baseTokenProgram: getNextAccount(),
      quoteTokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      rentProgram: getNextAccount(),
      metadataProgram: getNextAccount(),
    },
    data: getMigrateToCpswapInstructionDataDecoder().decode(instruction.data),
  };
}
