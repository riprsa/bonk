/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const UPDATE_CONFIG_DISCRIMINATOR = new Uint8Array([
  29, 158, 252, 191, 10, 83, 219, 99,
]);

export function getUpdateConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_CONFIG_DISCRIMINATOR
  );
}

export type UpdateConfigInstruction<
  TProgram extends string = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
  TAccountOwner extends
    | string
    | AccountMeta<string> = 'GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ',
  TAccountGlobalConfig extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountGlobalConfig extends string
        ? WritableAccount<TAccountGlobalConfig>
        : TAccountGlobalConfig,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateConfigInstructionData = {
  discriminator: ReadonlyUint8Array;
  param: number;
  value: bigint;
};

export type UpdateConfigInstructionDataArgs = {
  param: number;
  value: number | bigint;
};

export function getUpdateConfigInstructionDataEncoder(): FixedSizeEncoder<UpdateConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['param', getU8Encoder()],
      ['value', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: UPDATE_CONFIG_DISCRIMINATOR })
  );
}

export function getUpdateConfigInstructionDataDecoder(): FixedSizeDecoder<UpdateConfigInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['param', getU8Decoder()],
    ['value', getU64Decoder()],
  ]);
}

export function getUpdateConfigInstructionDataCodec(): FixedSizeCodec<
  UpdateConfigInstructionDataArgs,
  UpdateConfigInstructionData
> {
  return combineCodec(
    getUpdateConfigInstructionDataEncoder(),
    getUpdateConfigInstructionDataDecoder()
  );
}

export type UpdateConfigInput<
  TAccountOwner extends string = string,
  TAccountGlobalConfig extends string = string,
> = {
  /** The global config owner or admin */
  owner?: TransactionSigner<TAccountOwner>;
  /** Global config account to be changed */
  globalConfig: Address<TAccountGlobalConfig>;
  param: UpdateConfigInstructionDataArgs['param'];
  value: UpdateConfigInstructionDataArgs['value'];
};

export function getUpdateConfigInstruction<
  TAccountOwner extends string,
  TAccountGlobalConfig extends string,
  TProgramAddress extends Address = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
>(
  input: UpdateConfigInput<TAccountOwner, TAccountGlobalConfig>,
  config?: { programAddress?: TProgramAddress }
): UpdateConfigInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountGlobalConfig
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: false },
    globalConfig: { value: input.globalConfig ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.owner.value) {
    accounts.owner.value =
      'GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ' as Address<'GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.globalConfig),
    ],
    programAddress,
    data: getUpdateConfigInstructionDataEncoder().encode(
      args as UpdateConfigInstructionDataArgs
    ),
  } as UpdateConfigInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountGlobalConfig
  >;

  return instruction;
}

export type ParsedUpdateConfigInstruction<
  TProgram extends string = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The global config owner or admin */
    owner: TAccountMetas[0];
    /** Global config account to be changed */
    globalConfig: TAccountMetas[1];
  };
  data: UpdateConfigInstructionData;
};

export function parseUpdateConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedUpdateConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      globalConfig: getNextAccount(),
    },
    data: getUpdateConfigInstructionDataDecoder().decode(instruction.data),
  };
}
