/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CREATE_CONFIG_DISCRIMINATOR = new Uint8Array([
  201, 207, 243, 114, 75, 111, 47, 189,
]);

export function getCreateConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_CONFIG_DISCRIMINATOR
  );
}

export type CreateConfigInstruction<
  TProgram extends string = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
  TAccountOwner extends
    | string
    | AccountMeta<string> = 'GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ',
  TAccountGlobalConfig extends string | AccountMeta<string> = string,
  TAccountQuoteTokenMint extends string | AccountMeta<string> = string,
  TAccountProtocolFeeOwner extends string | AccountMeta<string> = string,
  TAccountMigrateFeeOwner extends string | AccountMeta<string> = string,
  TAccountMigrateToAmmWallet extends string | AccountMeta<string> = string,
  TAccountMigrateToCpswapWallet extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountGlobalConfig extends string
        ? WritableAccount<TAccountGlobalConfig>
        : TAccountGlobalConfig,
      TAccountQuoteTokenMint extends string
        ? ReadonlyAccount<TAccountQuoteTokenMint>
        : TAccountQuoteTokenMint,
      TAccountProtocolFeeOwner extends string
        ? ReadonlyAccount<TAccountProtocolFeeOwner>
        : TAccountProtocolFeeOwner,
      TAccountMigrateFeeOwner extends string
        ? ReadonlyAccount<TAccountMigrateFeeOwner>
        : TAccountMigrateFeeOwner,
      TAccountMigrateToAmmWallet extends string
        ? ReadonlyAccount<TAccountMigrateToAmmWallet>
        : TAccountMigrateToAmmWallet,
      TAccountMigrateToCpswapWallet extends string
        ? ReadonlyAccount<TAccountMigrateToCpswapWallet>
        : TAccountMigrateToCpswapWallet,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateConfigInstructionData = {
  discriminator: ReadonlyUint8Array;
  curveType: number;
  index: number;
  migrateFee: bigint;
  tradeFeeRate: bigint;
};

export type CreateConfigInstructionDataArgs = {
  curveType: number;
  index: number;
  migrateFee: number | bigint;
  tradeFeeRate: number | bigint;
};

export function getCreateConfigInstructionDataEncoder(): FixedSizeEncoder<CreateConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['curveType', getU8Encoder()],
      ['index', getU16Encoder()],
      ['migrateFee', getU64Encoder()],
      ['tradeFeeRate', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CREATE_CONFIG_DISCRIMINATOR })
  );
}

export function getCreateConfigInstructionDataDecoder(): FixedSizeDecoder<CreateConfigInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['curveType', getU8Decoder()],
    ['index', getU16Decoder()],
    ['migrateFee', getU64Decoder()],
    ['tradeFeeRate', getU64Decoder()],
  ]);
}

export function getCreateConfigInstructionDataCodec(): FixedSizeCodec<
  CreateConfigInstructionDataArgs,
  CreateConfigInstructionData
> {
  return combineCodec(
    getCreateConfigInstructionDataEncoder(),
    getCreateConfigInstructionDataDecoder()
  );
}

export type CreateConfigAsyncInput<
  TAccountOwner extends string = string,
  TAccountGlobalConfig extends string = string,
  TAccountQuoteTokenMint extends string = string,
  TAccountProtocolFeeOwner extends string = string,
  TAccountMigrateFeeOwner extends string = string,
  TAccountMigrateToAmmWallet extends string = string,
  TAccountMigrateToCpswapWallet extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /**
   * The protocol owner/admin account
   * Must match the predefined admin address
   * Has authority to create and modify protocol configurations
   */
  owner?: TransactionSigner<TAccountOwner>;
  /**
   * Global configuration account that stores protocol-wide settings
   * PDA generated using GLOBAL_CONFIG_SEED, quote token mint, and curve type
   * Stores fee rates and protocol parameters
   */
  globalConfig?: Address<TAccountGlobalConfig>;
  /**
   * The mint address of the quote token (token used for buying)
   * This will be the standard token used for all pools with this config
   */
  quoteTokenMint: Address<TAccountQuoteTokenMint>;
  /** Account that will receive protocol fees */
  protocolFeeOwner: Address<TAccountProtocolFeeOwner>;
  /** Account that will receive migrate fees */
  migrateFeeOwner: Address<TAccountMigrateFeeOwner>;
  /** The control wallet address for migrating to amm */
  migrateToAmmWallet: Address<TAccountMigrateToAmmWallet>;
  /** The control wallet address for migrating to cpswap */
  migrateToCpswapWallet: Address<TAccountMigrateToCpswapWallet>;
  /** Required for account creation */
  systemProgram?: Address<TAccountSystemProgram>;
  curveType: CreateConfigInstructionDataArgs['curveType'];
  index: CreateConfigInstructionDataArgs['index'];
  migrateFee: CreateConfigInstructionDataArgs['migrateFee'];
  tradeFeeRate: CreateConfigInstructionDataArgs['tradeFeeRate'];
};

export async function getCreateConfigInstructionAsync<
  TAccountOwner extends string,
  TAccountGlobalConfig extends string,
  TAccountQuoteTokenMint extends string,
  TAccountProtocolFeeOwner extends string,
  TAccountMigrateFeeOwner extends string,
  TAccountMigrateToAmmWallet extends string,
  TAccountMigrateToCpswapWallet extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
>(
  input: CreateConfigAsyncInput<
    TAccountOwner,
    TAccountGlobalConfig,
    TAccountQuoteTokenMint,
    TAccountProtocolFeeOwner,
    TAccountMigrateFeeOwner,
    TAccountMigrateToAmmWallet,
    TAccountMigrateToCpswapWallet,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateConfigInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountGlobalConfig,
    TAccountQuoteTokenMint,
    TAccountProtocolFeeOwner,
    TAccountMigrateFeeOwner,
    TAccountMigrateToAmmWallet,
    TAccountMigrateToCpswapWallet,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: true },
    globalConfig: { value: input.globalConfig ?? null, isWritable: true },
    quoteTokenMint: { value: input.quoteTokenMint ?? null, isWritable: false },
    protocolFeeOwner: {
      value: input.protocolFeeOwner ?? null,
      isWritable: false,
    },
    migrateFeeOwner: {
      value: input.migrateFeeOwner ?? null,
      isWritable: false,
    },
    migrateToAmmWallet: {
      value: input.migrateToAmmWallet ?? null,
      isWritable: false,
    },
    migrateToCpswapWallet: {
      value: input.migrateToCpswapWallet ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.owner.value) {
    accounts.owner.value =
      'GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ' as Address<'GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ'>;
  }
  if (!accounts.globalConfig.value) {
    accounts.globalConfig.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            103, 108, 111, 98, 97, 108, 95, 99, 111, 110, 102, 105, 103,
          ])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.quoteTokenMint.value)
        ),
        getU8Encoder().encode(expectSome(args.curveType)),
        getU16Encoder().encode(expectSome(args.index)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.globalConfig),
      getAccountMeta(accounts.quoteTokenMint),
      getAccountMeta(accounts.protocolFeeOwner),
      getAccountMeta(accounts.migrateFeeOwner),
      getAccountMeta(accounts.migrateToAmmWallet),
      getAccountMeta(accounts.migrateToCpswapWallet),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateConfigInstructionDataEncoder().encode(
      args as CreateConfigInstructionDataArgs
    ),
  } as CreateConfigInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountGlobalConfig,
    TAccountQuoteTokenMint,
    TAccountProtocolFeeOwner,
    TAccountMigrateFeeOwner,
    TAccountMigrateToAmmWallet,
    TAccountMigrateToCpswapWallet,
    TAccountSystemProgram
  >;

  return instruction;
}

export type CreateConfigInput<
  TAccountOwner extends string = string,
  TAccountGlobalConfig extends string = string,
  TAccountQuoteTokenMint extends string = string,
  TAccountProtocolFeeOwner extends string = string,
  TAccountMigrateFeeOwner extends string = string,
  TAccountMigrateToAmmWallet extends string = string,
  TAccountMigrateToCpswapWallet extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /**
   * The protocol owner/admin account
   * Must match the predefined admin address
   * Has authority to create and modify protocol configurations
   */
  owner?: TransactionSigner<TAccountOwner>;
  /**
   * Global configuration account that stores protocol-wide settings
   * PDA generated using GLOBAL_CONFIG_SEED, quote token mint, and curve type
   * Stores fee rates and protocol parameters
   */
  globalConfig: Address<TAccountGlobalConfig>;
  /**
   * The mint address of the quote token (token used for buying)
   * This will be the standard token used for all pools with this config
   */
  quoteTokenMint: Address<TAccountQuoteTokenMint>;
  /** Account that will receive protocol fees */
  protocolFeeOwner: Address<TAccountProtocolFeeOwner>;
  /** Account that will receive migrate fees */
  migrateFeeOwner: Address<TAccountMigrateFeeOwner>;
  /** The control wallet address for migrating to amm */
  migrateToAmmWallet: Address<TAccountMigrateToAmmWallet>;
  /** The control wallet address for migrating to cpswap */
  migrateToCpswapWallet: Address<TAccountMigrateToCpswapWallet>;
  /** Required for account creation */
  systemProgram?: Address<TAccountSystemProgram>;
  curveType: CreateConfigInstructionDataArgs['curveType'];
  index: CreateConfigInstructionDataArgs['index'];
  migrateFee: CreateConfigInstructionDataArgs['migrateFee'];
  tradeFeeRate: CreateConfigInstructionDataArgs['tradeFeeRate'];
};

export function getCreateConfigInstruction<
  TAccountOwner extends string,
  TAccountGlobalConfig extends string,
  TAccountQuoteTokenMint extends string,
  TAccountProtocolFeeOwner extends string,
  TAccountMigrateFeeOwner extends string,
  TAccountMigrateToAmmWallet extends string,
  TAccountMigrateToCpswapWallet extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
>(
  input: CreateConfigInput<
    TAccountOwner,
    TAccountGlobalConfig,
    TAccountQuoteTokenMint,
    TAccountProtocolFeeOwner,
    TAccountMigrateFeeOwner,
    TAccountMigrateToAmmWallet,
    TAccountMigrateToCpswapWallet,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateConfigInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountGlobalConfig,
  TAccountQuoteTokenMint,
  TAccountProtocolFeeOwner,
  TAccountMigrateFeeOwner,
  TAccountMigrateToAmmWallet,
  TAccountMigrateToCpswapWallet,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: true },
    globalConfig: { value: input.globalConfig ?? null, isWritable: true },
    quoteTokenMint: { value: input.quoteTokenMint ?? null, isWritable: false },
    protocolFeeOwner: {
      value: input.protocolFeeOwner ?? null,
      isWritable: false,
    },
    migrateFeeOwner: {
      value: input.migrateFeeOwner ?? null,
      isWritable: false,
    },
    migrateToAmmWallet: {
      value: input.migrateToAmmWallet ?? null,
      isWritable: false,
    },
    migrateToCpswapWallet: {
      value: input.migrateToCpswapWallet ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.owner.value) {
    accounts.owner.value =
      'GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ' as Address<'GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.globalConfig),
      getAccountMeta(accounts.quoteTokenMint),
      getAccountMeta(accounts.protocolFeeOwner),
      getAccountMeta(accounts.migrateFeeOwner),
      getAccountMeta(accounts.migrateToAmmWallet),
      getAccountMeta(accounts.migrateToCpswapWallet),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateConfigInstructionDataEncoder().encode(
      args as CreateConfigInstructionDataArgs
    ),
  } as CreateConfigInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountGlobalConfig,
    TAccountQuoteTokenMint,
    TAccountProtocolFeeOwner,
    TAccountMigrateFeeOwner,
    TAccountMigrateToAmmWallet,
    TAccountMigrateToCpswapWallet,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedCreateConfigInstruction<
  TProgram extends string = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /**
     * The protocol owner/admin account
     * Must match the predefined admin address
     * Has authority to create and modify protocol configurations
     */

    owner: TAccountMetas[0];
    /**
     * Global configuration account that stores protocol-wide settings
     * PDA generated using GLOBAL_CONFIG_SEED, quote token mint, and curve type
     * Stores fee rates and protocol parameters
     */

    globalConfig: TAccountMetas[1];
    /**
     * The mint address of the quote token (token used for buying)
     * This will be the standard token used for all pools with this config
     */

    quoteTokenMint: TAccountMetas[2];
    /** Account that will receive protocol fees */
    protocolFeeOwner: TAccountMetas[3];
    /** Account that will receive migrate fees */
    migrateFeeOwner: TAccountMetas[4];
    /** The control wallet address for migrating to amm */
    migrateToAmmWallet: TAccountMetas[5];
    /** The control wallet address for migrating to cpswap */
    migrateToCpswapWallet: TAccountMetas[6];
    /** Required for account creation */
    systemProgram: TAccountMetas[7];
  };
  data: CreateConfigInstructionData;
};

export function parseCreateConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      globalConfig: getNextAccount(),
      quoteTokenMint: getNextAccount(),
      protocolFeeOwner: getNextAccount(),
      migrateFeeOwner: getNextAccount(),
      migrateToAmmWallet: getNextAccount(),
      migrateToCpswapWallet: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateConfigInstructionDataDecoder().decode(instruction.data),
  };
}
