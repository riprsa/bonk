/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getPlatformConfigParamDecoder,
  getPlatformConfigParamEncoder,
  type PlatformConfigParam,
  type PlatformConfigParamArgs,
} from '../types';

export const UPDATE_PLATFORM_CONFIG_DISCRIMINATOR = new Uint8Array([
  195, 60, 76, 129, 146, 45, 67, 143,
]);

export function getUpdatePlatformConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_PLATFORM_CONFIG_DISCRIMINATOR
  );
}

export type UpdatePlatformConfigInstruction<
  TProgram extends string = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
  TAccountPlatformAdmin extends string | AccountMeta<string> = string,
  TAccountPlatformConfig extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPlatformAdmin extends string
        ? ReadonlySignerAccount<TAccountPlatformAdmin> &
            AccountSignerMeta<TAccountPlatformAdmin>
        : TAccountPlatformAdmin,
      TAccountPlatformConfig extends string
        ? WritableAccount<TAccountPlatformConfig>
        : TAccountPlatformConfig,
      ...TRemainingAccounts,
    ]
  >;

export type UpdatePlatformConfigInstructionData = {
  discriminator: ReadonlyUint8Array;
  param: PlatformConfigParam;
};

export type UpdatePlatformConfigInstructionDataArgs = {
  param: PlatformConfigParamArgs;
};

export function getUpdatePlatformConfigInstructionDataEncoder(): Encoder<UpdatePlatformConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['param', getPlatformConfigParamEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: UPDATE_PLATFORM_CONFIG_DISCRIMINATOR,
    })
  );
}

export function getUpdatePlatformConfigInstructionDataDecoder(): Decoder<UpdatePlatformConfigInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['param', getPlatformConfigParamDecoder()],
  ]);
}

export function getUpdatePlatformConfigInstructionDataCodec(): Codec<
  UpdatePlatformConfigInstructionDataArgs,
  UpdatePlatformConfigInstructionData
> {
  return combineCodec(
    getUpdatePlatformConfigInstructionDataEncoder(),
    getUpdatePlatformConfigInstructionDataDecoder()
  );
}

export type UpdatePlatformConfigAsyncInput<
  TAccountPlatformAdmin extends string = string,
  TAccountPlatformConfig extends string = string,
> = {
  /** The account paying for the initialization costs */
  platformAdmin: TransactionSigner<TAccountPlatformAdmin>;
  /** Platform config account to be changed */
  platformConfig?: Address<TAccountPlatformConfig>;
  param: UpdatePlatformConfigInstructionDataArgs['param'];
};

export async function getUpdatePlatformConfigInstructionAsync<
  TAccountPlatformAdmin extends string,
  TAccountPlatformConfig extends string,
  TProgramAddress extends Address = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
>(
  input: UpdatePlatformConfigAsyncInput<
    TAccountPlatformAdmin,
    TAccountPlatformConfig
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  UpdatePlatformConfigInstruction<
    TProgramAddress,
    TAccountPlatformAdmin,
    TAccountPlatformConfig
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    platformAdmin: { value: input.platformAdmin ?? null, isWritable: false },
    platformConfig: { value: input.platformConfig ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.platformConfig.value) {
    accounts.platformConfig.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            112, 108, 97, 116, 102, 111, 114, 109, 95, 99, 111, 110, 102, 105,
            103,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.platformAdmin.value)),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.platformAdmin),
      getAccountMeta(accounts.platformConfig),
    ],
    programAddress,
    data: getUpdatePlatformConfigInstructionDataEncoder().encode(
      args as UpdatePlatformConfigInstructionDataArgs
    ),
  } as UpdatePlatformConfigInstruction<
    TProgramAddress,
    TAccountPlatformAdmin,
    TAccountPlatformConfig
  >;

  return instruction;
}

export type UpdatePlatformConfigInput<
  TAccountPlatformAdmin extends string = string,
  TAccountPlatformConfig extends string = string,
> = {
  /** The account paying for the initialization costs */
  platformAdmin: TransactionSigner<TAccountPlatformAdmin>;
  /** Platform config account to be changed */
  platformConfig: Address<TAccountPlatformConfig>;
  param: UpdatePlatformConfigInstructionDataArgs['param'];
};

export function getUpdatePlatformConfigInstruction<
  TAccountPlatformAdmin extends string,
  TAccountPlatformConfig extends string,
  TProgramAddress extends Address = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
>(
  input: UpdatePlatformConfigInput<
    TAccountPlatformAdmin,
    TAccountPlatformConfig
  >,
  config?: { programAddress?: TProgramAddress }
): UpdatePlatformConfigInstruction<
  TProgramAddress,
  TAccountPlatformAdmin,
  TAccountPlatformConfig
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    platformAdmin: { value: input.platformAdmin ?? null, isWritable: false },
    platformConfig: { value: input.platformConfig ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.platformAdmin),
      getAccountMeta(accounts.platformConfig),
    ],
    programAddress,
    data: getUpdatePlatformConfigInstructionDataEncoder().encode(
      args as UpdatePlatformConfigInstructionDataArgs
    ),
  } as UpdatePlatformConfigInstruction<
    TProgramAddress,
    TAccountPlatformAdmin,
    TAccountPlatformConfig
  >;

  return instruction;
}

export type ParsedUpdatePlatformConfigInstruction<
  TProgram extends string = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The account paying for the initialization costs */
    platformAdmin: TAccountMetas[0];
    /** Platform config account to be changed */
    platformConfig: TAccountMetas[1];
  };
  data: UpdatePlatformConfigInstructionData;
};

export function parseUpdatePlatformConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedUpdatePlatformConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      platformAdmin: getNextAccount(),
      platformConfig: getNextAccount(),
    },
    data: getUpdatePlatformConfigInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
