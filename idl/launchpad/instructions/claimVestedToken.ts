/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CLAIM_VESTED_TOKEN_DISCRIMINATOR = new Uint8Array([
  49, 33, 104, 30, 189, 157, 79, 35,
]);

export function getClaimVestedTokenDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLAIM_VESTED_TOKEN_DISCRIMINATOR
  );
}

export type ClaimVestedTokenInstruction<
  TProgram extends string = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
  TAccountBeneficiary extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountPoolState extends string | AccountMeta<string> = string,
  TAccountVestingRecord extends string | AccountMeta<string> = string,
  TAccountBaseVault extends string | AccountMeta<string> = string,
  TAccountUserBaseToken extends string | AccountMeta<string> = string,
  TAccountBaseTokenMint extends string | AccountMeta<string> = string,
  TAccountBaseTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountBeneficiary extends string
        ? WritableSignerAccount<TAccountBeneficiary> &
            AccountSignerMeta<TAccountBeneficiary>
        : TAccountBeneficiary,
      TAccountAuthority extends string
        ? ReadonlyAccount<TAccountAuthority>
        : TAccountAuthority,
      TAccountPoolState extends string
        ? WritableAccount<TAccountPoolState>
        : TAccountPoolState,
      TAccountVestingRecord extends string
        ? WritableAccount<TAccountVestingRecord>
        : TAccountVestingRecord,
      TAccountBaseVault extends string
        ? WritableAccount<TAccountBaseVault>
        : TAccountBaseVault,
      TAccountUserBaseToken extends string
        ? WritableSignerAccount<TAccountUserBaseToken> &
            AccountSignerMeta<TAccountUserBaseToken>
        : TAccountUserBaseToken,
      TAccountBaseTokenMint extends string
        ? ReadonlyAccount<TAccountBaseTokenMint>
        : TAccountBaseTokenMint,
      TAccountBaseTokenProgram extends string
        ? ReadonlyAccount<TAccountBaseTokenProgram>
        : TAccountBaseTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ClaimVestedTokenInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type ClaimVestedTokenInstructionDataArgs = {};

export function getClaimVestedTokenInstructionDataEncoder(): FixedSizeEncoder<ClaimVestedTokenInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: CLAIM_VESTED_TOKEN_DISCRIMINATOR })
  );
}

export function getClaimVestedTokenInstructionDataDecoder(): FixedSizeDecoder<ClaimVestedTokenInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getClaimVestedTokenInstructionDataCodec(): FixedSizeCodec<
  ClaimVestedTokenInstructionDataArgs,
  ClaimVestedTokenInstructionData
> {
  return combineCodec(
    getClaimVestedTokenInstructionDataEncoder(),
    getClaimVestedTokenInstructionDataDecoder()
  );
}

export type ClaimVestedTokenAsyncInput<
  TAccountBeneficiary extends string = string,
  TAccountAuthority extends string = string,
  TAccountPoolState extends string = string,
  TAccountVestingRecord extends string = string,
  TAccountBaseVault extends string = string,
  TAccountUserBaseToken extends string = string,
  TAccountBaseTokenMint extends string = string,
  TAccountBaseTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
> = {
  /** The beneficiary of the vesting account */
  beneficiary: TransactionSigner<TAccountBeneficiary>;
  /**
   * PDA that acts as the authority for pool vault and mint operations
   * Generated using AUTH_SEED
   */
  authority?: Address<TAccountAuthority>;
  /**
   * Account that stores the pool's state and parameters
   * PDA generated using POOL_SEED and both token mints
   */
  poolState: Address<TAccountPoolState>;
  /** The vesting record account */
  vestingRecord?: Address<TAccountVestingRecord>;
  /**
   * The pool's vault for base tokens
   * Will be debited to send tokens to the user
   */
  baseVault: Address<TAccountBaseVault>;
  userBaseToken: TransactionSigner<TAccountUserBaseToken>;
  /**
   * The mint for the base token (token being sold)
   * Created in this instruction with specified decimals
   */
  baseTokenMint: Address<TAccountBaseTokenMint>;
  /**
   * SPL Token program for the base token
   * Must be the standard Token program
   */
  baseTokenProgram?: Address<TAccountBaseTokenProgram>;
  /** Required for account creation */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Required for associated token program */
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
};

export async function getClaimVestedTokenInstructionAsync<
  TAccountBeneficiary extends string,
  TAccountAuthority extends string,
  TAccountPoolState extends string,
  TAccountVestingRecord extends string,
  TAccountBaseVault extends string,
  TAccountUserBaseToken extends string,
  TAccountBaseTokenMint extends string,
  TAccountBaseTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TProgramAddress extends Address = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
>(
  input: ClaimVestedTokenAsyncInput<
    TAccountBeneficiary,
    TAccountAuthority,
    TAccountPoolState,
    TAccountVestingRecord,
    TAccountBaseVault,
    TAccountUserBaseToken,
    TAccountBaseTokenMint,
    TAccountBaseTokenProgram,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ClaimVestedTokenInstruction<
    TProgramAddress,
    TAccountBeneficiary,
    TAccountAuthority,
    TAccountPoolState,
    TAccountVestingRecord,
    TAccountBaseVault,
    TAccountUserBaseToken,
    TAccountBaseTokenMint,
    TAccountBaseTokenProgram,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    beneficiary: { value: input.beneficiary ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    poolState: { value: input.poolState ?? null, isWritable: true },
    vestingRecord: { value: input.vestingRecord ?? null, isWritable: true },
    baseVault: { value: input.baseVault ?? null, isWritable: true },
    userBaseToken: { value: input.userBaseToken ?? null, isWritable: true },
    baseTokenMint: { value: input.baseTokenMint ?? null, isWritable: false },
    baseTokenProgram: {
      value: input.baseTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.authority.value) {
    accounts.authority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            118, 97, 117, 108, 116, 95, 97, 117, 116, 104, 95, 115, 101, 101,
            100,
          ])
        ),
      ],
    });
  }
  if (!accounts.vestingRecord.value) {
    accounts.vestingRecord.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            112, 111, 111, 108, 95, 118, 101, 115, 116, 105, 110, 103,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.poolState.value)),
        getAddressEncoder().encode(expectAddress(accounts.beneficiary.value)),
      ],
    });
  }
  if (!accounts.baseTokenProgram.value) {
    accounts.baseTokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.beneficiary),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.poolState),
      getAccountMeta(accounts.vestingRecord),
      getAccountMeta(accounts.baseVault),
      getAccountMeta(accounts.userBaseToken),
      getAccountMeta(accounts.baseTokenMint),
      getAccountMeta(accounts.baseTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.associatedTokenProgram),
    ],
    programAddress,
    data: getClaimVestedTokenInstructionDataEncoder().encode({}),
  } as ClaimVestedTokenInstruction<
    TProgramAddress,
    TAccountBeneficiary,
    TAccountAuthority,
    TAccountPoolState,
    TAccountVestingRecord,
    TAccountBaseVault,
    TAccountUserBaseToken,
    TAccountBaseTokenMint,
    TAccountBaseTokenProgram,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram
  >;

  return instruction;
}

export type ClaimVestedTokenInput<
  TAccountBeneficiary extends string = string,
  TAccountAuthority extends string = string,
  TAccountPoolState extends string = string,
  TAccountVestingRecord extends string = string,
  TAccountBaseVault extends string = string,
  TAccountUserBaseToken extends string = string,
  TAccountBaseTokenMint extends string = string,
  TAccountBaseTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
> = {
  /** The beneficiary of the vesting account */
  beneficiary: TransactionSigner<TAccountBeneficiary>;
  /**
   * PDA that acts as the authority for pool vault and mint operations
   * Generated using AUTH_SEED
   */
  authority: Address<TAccountAuthority>;
  /**
   * Account that stores the pool's state and parameters
   * PDA generated using POOL_SEED and both token mints
   */
  poolState: Address<TAccountPoolState>;
  /** The vesting record account */
  vestingRecord: Address<TAccountVestingRecord>;
  /**
   * The pool's vault for base tokens
   * Will be debited to send tokens to the user
   */
  baseVault: Address<TAccountBaseVault>;
  userBaseToken: TransactionSigner<TAccountUserBaseToken>;
  /**
   * The mint for the base token (token being sold)
   * Created in this instruction with specified decimals
   */
  baseTokenMint: Address<TAccountBaseTokenMint>;
  /**
   * SPL Token program for the base token
   * Must be the standard Token program
   */
  baseTokenProgram?: Address<TAccountBaseTokenProgram>;
  /** Required for account creation */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Required for associated token program */
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
};

export function getClaimVestedTokenInstruction<
  TAccountBeneficiary extends string,
  TAccountAuthority extends string,
  TAccountPoolState extends string,
  TAccountVestingRecord extends string,
  TAccountBaseVault extends string,
  TAccountUserBaseToken extends string,
  TAccountBaseTokenMint extends string,
  TAccountBaseTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TProgramAddress extends Address = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
>(
  input: ClaimVestedTokenInput<
    TAccountBeneficiary,
    TAccountAuthority,
    TAccountPoolState,
    TAccountVestingRecord,
    TAccountBaseVault,
    TAccountUserBaseToken,
    TAccountBaseTokenMint,
    TAccountBaseTokenProgram,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ClaimVestedTokenInstruction<
  TProgramAddress,
  TAccountBeneficiary,
  TAccountAuthority,
  TAccountPoolState,
  TAccountVestingRecord,
  TAccountBaseVault,
  TAccountUserBaseToken,
  TAccountBaseTokenMint,
  TAccountBaseTokenProgram,
  TAccountSystemProgram,
  TAccountAssociatedTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    beneficiary: { value: input.beneficiary ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    poolState: { value: input.poolState ?? null, isWritable: true },
    vestingRecord: { value: input.vestingRecord ?? null, isWritable: true },
    baseVault: { value: input.baseVault ?? null, isWritable: true },
    userBaseToken: { value: input.userBaseToken ?? null, isWritable: true },
    baseTokenMint: { value: input.baseTokenMint ?? null, isWritable: false },
    baseTokenProgram: {
      value: input.baseTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.baseTokenProgram.value) {
    accounts.baseTokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.beneficiary),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.poolState),
      getAccountMeta(accounts.vestingRecord),
      getAccountMeta(accounts.baseVault),
      getAccountMeta(accounts.userBaseToken),
      getAccountMeta(accounts.baseTokenMint),
      getAccountMeta(accounts.baseTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.associatedTokenProgram),
    ],
    programAddress,
    data: getClaimVestedTokenInstructionDataEncoder().encode({}),
  } as ClaimVestedTokenInstruction<
    TProgramAddress,
    TAccountBeneficiary,
    TAccountAuthority,
    TAccountPoolState,
    TAccountVestingRecord,
    TAccountBaseVault,
    TAccountUserBaseToken,
    TAccountBaseTokenMint,
    TAccountBaseTokenProgram,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram
  >;

  return instruction;
}

export type ParsedClaimVestedTokenInstruction<
  TProgram extends string = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The beneficiary of the vesting account */
    beneficiary: TAccountMetas[0];
    /**
     * PDA that acts as the authority for pool vault and mint operations
     * Generated using AUTH_SEED
     */

    authority: TAccountMetas[1];
    /**
     * Account that stores the pool's state and parameters
     * PDA generated using POOL_SEED and both token mints
     */

    poolState: TAccountMetas[2];
    /** The vesting record account */
    vestingRecord: TAccountMetas[3];
    /**
     * The pool's vault for base tokens
     * Will be debited to send tokens to the user
     */

    baseVault: TAccountMetas[4];
    userBaseToken: TAccountMetas[5];
    /**
     * The mint for the base token (token being sold)
     * Created in this instruction with specified decimals
     */

    baseTokenMint: TAccountMetas[6];
    /**
     * SPL Token program for the base token
     * Must be the standard Token program
     */

    baseTokenProgram: TAccountMetas[7];
    /** Required for account creation */
    systemProgram: TAccountMetas[8];
    /** Required for associated token program */
    associatedTokenProgram: TAccountMetas[9];
  };
  data: ClaimVestedTokenInstructionData;
};

export function parseClaimVestedTokenInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedClaimVestedTokenInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      beneficiary: getNextAccount(),
      authority: getNextAccount(),
      poolState: getNextAccount(),
      vestingRecord: getNextAccount(),
      baseVault: getNextAccount(),
      userBaseToken: getNextAccount(),
      baseTokenMint: getNextAccount(),
      baseTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
    },
    data: getClaimVestedTokenInstructionDataDecoder().decode(instruction.data),
  };
}
