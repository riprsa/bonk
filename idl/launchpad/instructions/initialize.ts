/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getCurveParamsDecoder,
  getCurveParamsEncoder,
  getMintParamsDecoder,
  getMintParamsEncoder,
  getVestingParamsDecoder,
  getVestingParamsEncoder,
  type CurveParams,
  type CurveParamsArgs,
  type MintParams,
  type MintParamsArgs,
  type VestingParams,
  type VestingParamsArgs,
} from '../types';

export const INITIALIZE_DISCRIMINATOR = new Uint8Array([
  175, 175, 109, 31, 13, 152, 155, 237,
]);

export function getInitializeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(INITIALIZE_DISCRIMINATOR);
}

export type InitializeInstruction<
  TProgram extends string = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountCreator extends string | AccountMeta<string> = string,
  TAccountGlobalConfig extends string | AccountMeta<string> = string,
  TAccountPlatformConfig extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountPoolState extends string | AccountMeta<string> = string,
  TAccountBaseMint extends string | AccountMeta<string> = string,
  TAccountQuoteMint extends string | AccountMeta<string> = string,
  TAccountBaseVault extends string | AccountMeta<string> = string,
  TAccountQuoteVault extends string | AccountMeta<string> = string,
  TAccountMetadataAccount extends string | AccountMeta<string> = string,
  TAccountBaseTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountQuoteTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountMetadataProgram extends
    | string
    | AccountMeta<string> = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountRentProgram extends
    | string
    | AccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountCreator extends string
        ? ReadonlyAccount<TAccountCreator>
        : TAccountCreator,
      TAccountGlobalConfig extends string
        ? ReadonlyAccount<TAccountGlobalConfig>
        : TAccountGlobalConfig,
      TAccountPlatformConfig extends string
        ? ReadonlyAccount<TAccountPlatformConfig>
        : TAccountPlatformConfig,
      TAccountAuthority extends string
        ? ReadonlyAccount<TAccountAuthority>
        : TAccountAuthority,
      TAccountPoolState extends string
        ? WritableAccount<TAccountPoolState>
        : TAccountPoolState,
      TAccountBaseMint extends string
        ? WritableSignerAccount<TAccountBaseMint> &
            AccountSignerMeta<TAccountBaseMint>
        : TAccountBaseMint,
      TAccountQuoteMint extends string
        ? ReadonlyAccount<TAccountQuoteMint>
        : TAccountQuoteMint,
      TAccountBaseVault extends string
        ? WritableAccount<TAccountBaseVault>
        : TAccountBaseVault,
      TAccountQuoteVault extends string
        ? WritableAccount<TAccountQuoteVault>
        : TAccountQuoteVault,
      TAccountMetadataAccount extends string
        ? WritableAccount<TAccountMetadataAccount>
        : TAccountMetadataAccount,
      TAccountBaseTokenProgram extends string
        ? ReadonlyAccount<TAccountBaseTokenProgram>
        : TAccountBaseTokenProgram,
      TAccountQuoteTokenProgram extends string
        ? ReadonlyAccount<TAccountQuoteTokenProgram>
        : TAccountQuoteTokenProgram,
      TAccountMetadataProgram extends string
        ? ReadonlyAccount<TAccountMetadataProgram>
        : TAccountMetadataProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRentProgram extends string
        ? ReadonlyAccount<TAccountRentProgram>
        : TAccountRentProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeInstructionData = {
  discriminator: ReadonlyUint8Array;
  baseMintParam: MintParams;
  curveParam: CurveParams;
  vestingParam: VestingParams;
};

export type InitializeInstructionDataArgs = {
  baseMintParam: MintParamsArgs;
  curveParam: CurveParamsArgs;
  vestingParam: VestingParamsArgs;
};

export function getInitializeInstructionDataEncoder(): Encoder<InitializeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['baseMintParam', getMintParamsEncoder()],
      ['curveParam', getCurveParamsEncoder()],
      ['vestingParam', getVestingParamsEncoder()],
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_DISCRIMINATOR })
  );
}

export function getInitializeInstructionDataDecoder(): Decoder<InitializeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['baseMintParam', getMintParamsDecoder()],
    ['curveParam', getCurveParamsDecoder()],
    ['vestingParam', getVestingParamsDecoder()],
  ]);
}

export function getInitializeInstructionDataCodec(): Codec<
  InitializeInstructionDataArgs,
  InitializeInstructionData
> {
  return combineCodec(
    getInitializeInstructionDataEncoder(),
    getInitializeInstructionDataDecoder()
  );
}

export type InitializeAsyncInput<
  TAccountPayer extends string = string,
  TAccountCreator extends string = string,
  TAccountGlobalConfig extends string = string,
  TAccountPlatformConfig extends string = string,
  TAccountAuthority extends string = string,
  TAccountPoolState extends string = string,
  TAccountBaseMint extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountBaseVault extends string = string,
  TAccountQuoteVault extends string = string,
  TAccountMetadataAccount extends string = string,
  TAccountBaseTokenProgram extends string = string,
  TAccountQuoteTokenProgram extends string = string,
  TAccountMetadataProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRentProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  /**
   * The account paying for the initialization costs
   * This can be any account with sufficient SOL to cover the transaction
   */
  payer: TransactionSigner<TAccountPayer>;
  creator: Address<TAccountCreator>;
  /**
   * Global configuration account containing protocol-wide settings
   * Includes settings like quote token mint and fee parameters
   */
  globalConfig: Address<TAccountGlobalConfig>;
  /**
   * Platform configuration account containing platform info
   * Includes settings like the fee_rate, name, web, img of the platform
   */
  platformConfig: Address<TAccountPlatformConfig>;
  /**
   * PDA that acts as the authority for pool vault and mint operations
   * Generated using AUTH_SEED
   */
  authority?: Address<TAccountAuthority>;
  /**
   * Account that stores the pool's state and parameters
   * PDA generated using POOL_SEED and both token mints
   */
  poolState?: Address<TAccountPoolState>;
  /**
   * The mint for the base token (token being sold)
   * Created in this instruction with specified decimals
   */
  baseMint: TransactionSigner<TAccountBaseMint>;
  /**
   * The mint for the quote token (token used to buy)
   * Must match the quote_mint specified in global config
   */
  quoteMint: Address<TAccountQuoteMint>;
  /**
   * Token account that holds the pool's base tokens
   * PDA generated using POOL_VAULT_SEED
   */
  baseVault?: Address<TAccountBaseVault>;
  /**
   * Token account that holds the pool's quote tokens
   * PDA generated using POOL_VAULT_SEED
   */
  quoteVault?: Address<TAccountQuoteVault>;
  /**
   * Account to store the base token's metadata
   * Created using Metaplex metadata program
   */
  metadataAccount: Address<TAccountMetadataAccount>;
  /**
   * SPL Token program for the base token
   * Must be the standard Token program
   */
  baseTokenProgram?: Address<TAccountBaseTokenProgram>;
  /** SPL Token program for the quote token */
  quoteTokenProgram?: Address<TAccountQuoteTokenProgram>;
  /**
   * Metaplex Token Metadata program
   * Used to create metadata for the base token
   */
  metadataProgram?: Address<TAccountMetadataProgram>;
  /** Required for account creation */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Required for rent exempt calculations */
  rentProgram?: Address<TAccountRentProgram>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  baseMintParam: InitializeInstructionDataArgs['baseMintParam'];
  curveParam: InitializeInstructionDataArgs['curveParam'];
  vestingParam: InitializeInstructionDataArgs['vestingParam'];
};

export async function getInitializeInstructionAsync<
  TAccountPayer extends string,
  TAccountCreator extends string,
  TAccountGlobalConfig extends string,
  TAccountPlatformConfig extends string,
  TAccountAuthority extends string,
  TAccountPoolState extends string,
  TAccountBaseMint extends string,
  TAccountQuoteMint extends string,
  TAccountBaseVault extends string,
  TAccountQuoteVault extends string,
  TAccountMetadataAccount extends string,
  TAccountBaseTokenProgram extends string,
  TAccountQuoteTokenProgram extends string,
  TAccountMetadataProgram extends string,
  TAccountSystemProgram extends string,
  TAccountRentProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
>(
  input: InitializeAsyncInput<
    TAccountPayer,
    TAccountCreator,
    TAccountGlobalConfig,
    TAccountPlatformConfig,
    TAccountAuthority,
    TAccountPoolState,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountMetadataAccount,
    TAccountBaseTokenProgram,
    TAccountQuoteTokenProgram,
    TAccountMetadataProgram,
    TAccountSystemProgram,
    TAccountRentProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountCreator,
    TAccountGlobalConfig,
    TAccountPlatformConfig,
    TAccountAuthority,
    TAccountPoolState,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountMetadataAccount,
    TAccountBaseTokenProgram,
    TAccountQuoteTokenProgram,
    TAccountMetadataProgram,
    TAccountSystemProgram,
    TAccountRentProgram,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    creator: { value: input.creator ?? null, isWritable: false },
    globalConfig: { value: input.globalConfig ?? null, isWritable: false },
    platformConfig: { value: input.platformConfig ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: false },
    poolState: { value: input.poolState ?? null, isWritable: true },
    baseMint: { value: input.baseMint ?? null, isWritable: true },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    baseVault: { value: input.baseVault ?? null, isWritable: true },
    quoteVault: { value: input.quoteVault ?? null, isWritable: true },
    metadataAccount: { value: input.metadataAccount ?? null, isWritable: true },
    baseTokenProgram: {
      value: input.baseTokenProgram ?? null,
      isWritable: false,
    },
    quoteTokenProgram: {
      value: input.quoteTokenProgram ?? null,
      isWritable: false,
    },
    metadataProgram: {
      value: input.metadataProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rentProgram: { value: input.rentProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.authority.value) {
    accounts.authority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            118, 97, 117, 108, 116, 95, 97, 117, 116, 104, 95, 115, 101, 101,
            100,
          ])
        ),
      ],
    });
  }
  if (!accounts.poolState.value) {
    accounts.poolState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([112, 111, 111, 108])),
        getAddressEncoder().encode(expectAddress(accounts.baseMint.value)),
        getAddressEncoder().encode(expectAddress(accounts.quoteMint.value)),
      ],
    });
  }
  if (!accounts.baseVault.value) {
    accounts.baseVault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([112, 111, 111, 108, 95, 118, 97, 117, 108, 116])
        ),
        getAddressEncoder().encode(expectAddress(accounts.poolState.value)),
        getAddressEncoder().encode(expectAddress(accounts.baseMint.value)),
      ],
    });
  }
  if (!accounts.quoteVault.value) {
    accounts.quoteVault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([112, 111, 111, 108, 95, 118, 97, 117, 108, 116])
        ),
        getAddressEncoder().encode(expectAddress(accounts.poolState.value)),
        getAddressEncoder().encode(expectAddress(accounts.quoteMint.value)),
      ],
    });
  }
  if (!accounts.baseTokenProgram.value) {
    accounts.baseTokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.quoteTokenProgram.value) {
    accounts.quoteTokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.metadataProgram.value) {
    accounts.metadataProgram.value =
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rentProgram.value) {
    accounts.rentProgram.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.globalConfig),
      getAccountMeta(accounts.platformConfig),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.poolState),
      getAccountMeta(accounts.baseMint),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.baseVault),
      getAccountMeta(accounts.quoteVault),
      getAccountMeta(accounts.metadataAccount),
      getAccountMeta(accounts.baseTokenProgram),
      getAccountMeta(accounts.quoteTokenProgram),
      getAccountMeta(accounts.metadataProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rentProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getInitializeInstructionDataEncoder().encode(
      args as InitializeInstructionDataArgs
    ),
  } as InitializeInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountCreator,
    TAccountGlobalConfig,
    TAccountPlatformConfig,
    TAccountAuthority,
    TAccountPoolState,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountMetadataAccount,
    TAccountBaseTokenProgram,
    TAccountQuoteTokenProgram,
    TAccountMetadataProgram,
    TAccountSystemProgram,
    TAccountRentProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type InitializeInput<
  TAccountPayer extends string = string,
  TAccountCreator extends string = string,
  TAccountGlobalConfig extends string = string,
  TAccountPlatformConfig extends string = string,
  TAccountAuthority extends string = string,
  TAccountPoolState extends string = string,
  TAccountBaseMint extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountBaseVault extends string = string,
  TAccountQuoteVault extends string = string,
  TAccountMetadataAccount extends string = string,
  TAccountBaseTokenProgram extends string = string,
  TAccountQuoteTokenProgram extends string = string,
  TAccountMetadataProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRentProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  /**
   * The account paying for the initialization costs
   * This can be any account with sufficient SOL to cover the transaction
   */
  payer: TransactionSigner<TAccountPayer>;
  creator: Address<TAccountCreator>;
  /**
   * Global configuration account containing protocol-wide settings
   * Includes settings like quote token mint and fee parameters
   */
  globalConfig: Address<TAccountGlobalConfig>;
  /**
   * Platform configuration account containing platform info
   * Includes settings like the fee_rate, name, web, img of the platform
   */
  platformConfig: Address<TAccountPlatformConfig>;
  /**
   * PDA that acts as the authority for pool vault and mint operations
   * Generated using AUTH_SEED
   */
  authority: Address<TAccountAuthority>;
  /**
   * Account that stores the pool's state and parameters
   * PDA generated using POOL_SEED and both token mints
   */
  poolState: Address<TAccountPoolState>;
  /**
   * The mint for the base token (token being sold)
   * Created in this instruction with specified decimals
   */
  baseMint: TransactionSigner<TAccountBaseMint>;
  /**
   * The mint for the quote token (token used to buy)
   * Must match the quote_mint specified in global config
   */
  quoteMint: Address<TAccountQuoteMint>;
  /**
   * Token account that holds the pool's base tokens
   * PDA generated using POOL_VAULT_SEED
   */
  baseVault: Address<TAccountBaseVault>;
  /**
   * Token account that holds the pool's quote tokens
   * PDA generated using POOL_VAULT_SEED
   */
  quoteVault: Address<TAccountQuoteVault>;
  /**
   * Account to store the base token's metadata
   * Created using Metaplex metadata program
   */
  metadataAccount: Address<TAccountMetadataAccount>;
  /**
   * SPL Token program for the base token
   * Must be the standard Token program
   */
  baseTokenProgram?: Address<TAccountBaseTokenProgram>;
  /** SPL Token program for the quote token */
  quoteTokenProgram?: Address<TAccountQuoteTokenProgram>;
  /**
   * Metaplex Token Metadata program
   * Used to create metadata for the base token
   */
  metadataProgram?: Address<TAccountMetadataProgram>;
  /** Required for account creation */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Required for rent exempt calculations */
  rentProgram?: Address<TAccountRentProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  baseMintParam: InitializeInstructionDataArgs['baseMintParam'];
  curveParam: InitializeInstructionDataArgs['curveParam'];
  vestingParam: InitializeInstructionDataArgs['vestingParam'];
};

export function getInitializeInstruction<
  TAccountPayer extends string,
  TAccountCreator extends string,
  TAccountGlobalConfig extends string,
  TAccountPlatformConfig extends string,
  TAccountAuthority extends string,
  TAccountPoolState extends string,
  TAccountBaseMint extends string,
  TAccountQuoteMint extends string,
  TAccountBaseVault extends string,
  TAccountQuoteVault extends string,
  TAccountMetadataAccount extends string,
  TAccountBaseTokenProgram extends string,
  TAccountQuoteTokenProgram extends string,
  TAccountMetadataProgram extends string,
  TAccountSystemProgram extends string,
  TAccountRentProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
>(
  input: InitializeInput<
    TAccountPayer,
    TAccountCreator,
    TAccountGlobalConfig,
    TAccountPlatformConfig,
    TAccountAuthority,
    TAccountPoolState,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountMetadataAccount,
    TAccountBaseTokenProgram,
    TAccountQuoteTokenProgram,
    TAccountMetadataProgram,
    TAccountSystemProgram,
    TAccountRentProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountCreator,
  TAccountGlobalConfig,
  TAccountPlatformConfig,
  TAccountAuthority,
  TAccountPoolState,
  TAccountBaseMint,
  TAccountQuoteMint,
  TAccountBaseVault,
  TAccountQuoteVault,
  TAccountMetadataAccount,
  TAccountBaseTokenProgram,
  TAccountQuoteTokenProgram,
  TAccountMetadataProgram,
  TAccountSystemProgram,
  TAccountRentProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    creator: { value: input.creator ?? null, isWritable: false },
    globalConfig: { value: input.globalConfig ?? null, isWritable: false },
    platformConfig: { value: input.platformConfig ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: false },
    poolState: { value: input.poolState ?? null, isWritable: true },
    baseMint: { value: input.baseMint ?? null, isWritable: true },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    baseVault: { value: input.baseVault ?? null, isWritable: true },
    quoteVault: { value: input.quoteVault ?? null, isWritable: true },
    metadataAccount: { value: input.metadataAccount ?? null, isWritable: true },
    baseTokenProgram: {
      value: input.baseTokenProgram ?? null,
      isWritable: false,
    },
    quoteTokenProgram: {
      value: input.quoteTokenProgram ?? null,
      isWritable: false,
    },
    metadataProgram: {
      value: input.metadataProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rentProgram: { value: input.rentProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.baseTokenProgram.value) {
    accounts.baseTokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.quoteTokenProgram.value) {
    accounts.quoteTokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.metadataProgram.value) {
    accounts.metadataProgram.value =
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rentProgram.value) {
    accounts.rentProgram.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.globalConfig),
      getAccountMeta(accounts.platformConfig),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.poolState),
      getAccountMeta(accounts.baseMint),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.baseVault),
      getAccountMeta(accounts.quoteVault),
      getAccountMeta(accounts.metadataAccount),
      getAccountMeta(accounts.baseTokenProgram),
      getAccountMeta(accounts.quoteTokenProgram),
      getAccountMeta(accounts.metadataProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rentProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getInitializeInstructionDataEncoder().encode(
      args as InitializeInstructionDataArgs
    ),
  } as InitializeInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountCreator,
    TAccountGlobalConfig,
    TAccountPlatformConfig,
    TAccountAuthority,
    TAccountPoolState,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountMetadataAccount,
    TAccountBaseTokenProgram,
    TAccountQuoteTokenProgram,
    TAccountMetadataProgram,
    TAccountSystemProgram,
    TAccountRentProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type ParsedInitializeInstruction<
  TProgram extends string = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /**
     * The account paying for the initialization costs
     * This can be any account with sufficient SOL to cover the transaction
     */

    payer: TAccountMetas[0];
    creator: TAccountMetas[1];
    /**
     * Global configuration account containing protocol-wide settings
     * Includes settings like quote token mint and fee parameters
     */

    globalConfig: TAccountMetas[2];
    /**
     * Platform configuration account containing platform info
     * Includes settings like the fee_rate, name, web, img of the platform
     */

    platformConfig: TAccountMetas[3];
    /**
     * PDA that acts as the authority for pool vault and mint operations
     * Generated using AUTH_SEED
     */

    authority: TAccountMetas[4];
    /**
     * Account that stores the pool's state and parameters
     * PDA generated using POOL_SEED and both token mints
     */

    poolState: TAccountMetas[5];
    /**
     * The mint for the base token (token being sold)
     * Created in this instruction with specified decimals
     */

    baseMint: TAccountMetas[6];
    /**
     * The mint for the quote token (token used to buy)
     * Must match the quote_mint specified in global config
     */

    quoteMint: TAccountMetas[7];
    /**
     * Token account that holds the pool's base tokens
     * PDA generated using POOL_VAULT_SEED
     */

    baseVault: TAccountMetas[8];
    /**
     * Token account that holds the pool's quote tokens
     * PDA generated using POOL_VAULT_SEED
     */

    quoteVault: TAccountMetas[9];
    /**
     * Account to store the base token's metadata
     * Created using Metaplex metadata program
     */

    metadataAccount: TAccountMetas[10];
    /**
     * SPL Token program for the base token
     * Must be the standard Token program
     */

    baseTokenProgram: TAccountMetas[11];
    /** SPL Token program for the quote token */
    quoteTokenProgram: TAccountMetas[12];
    /**
     * Metaplex Token Metadata program
     * Used to create metadata for the base token
     */

    metadataProgram: TAccountMetas[13];
    /** Required for account creation */
    systemProgram: TAccountMetas[14];
    /** Required for rent exempt calculations */
    rentProgram: TAccountMetas[15];
    eventAuthority: TAccountMetas[16];
    program: TAccountMetas[17];
  };
  data: InitializeInstructionData;
};

export function parseInitializeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 18) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      creator: getNextAccount(),
      globalConfig: getNextAccount(),
      platformConfig: getNextAccount(),
      authority: getNextAccount(),
      poolState: getNextAccount(),
      baseMint: getNextAccount(),
      quoteMint: getNextAccount(),
      baseVault: getNextAccount(),
      quoteVault: getNextAccount(),
      metadataAccount: getNextAccount(),
      baseTokenProgram: getNextAccount(),
      quoteTokenProgram: getNextAccount(),
      metadataProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      rentProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getInitializeInstructionDataDecoder().decode(instruction.data),
  };
}
