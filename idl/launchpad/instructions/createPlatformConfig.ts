/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getMigrateNftInfoDecoder,
  getMigrateNftInfoEncoder,
  type MigrateNftInfo,
  type MigrateNftInfoArgs,
} from '../types';

export const CREATE_PLATFORM_CONFIG_DISCRIMINATOR = new Uint8Array([
  176, 90, 196, 175, 253, 113, 220, 20,
]);

export function getCreatePlatformConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_PLATFORM_CONFIG_DISCRIMINATOR
  );
}

export type CreatePlatformConfigInstruction<
  TProgram extends string = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
  TAccountPlatformAdmin extends string | AccountMeta<string> = string,
  TAccountPlatformFeeWallet extends string | AccountMeta<string> = string,
  TAccountPlatformNftWallet extends string | AccountMeta<string> = string,
  TAccountPlatformConfig extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPlatformAdmin extends string
        ? WritableSignerAccount<TAccountPlatformAdmin> &
            AccountSignerMeta<TAccountPlatformAdmin>
        : TAccountPlatformAdmin,
      TAccountPlatformFeeWallet extends string
        ? ReadonlyAccount<TAccountPlatformFeeWallet>
        : TAccountPlatformFeeWallet,
      TAccountPlatformNftWallet extends string
        ? ReadonlyAccount<TAccountPlatformNftWallet>
        : TAccountPlatformNftWallet,
      TAccountPlatformConfig extends string
        ? WritableAccount<TAccountPlatformConfig>
        : TAccountPlatformConfig,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreatePlatformConfigInstructionData = {
  discriminator: ReadonlyUint8Array;
  migrateNftInfo: MigrateNftInfo;
  feeRate: bigint;
  name: string;
  web: string;
  img: string;
};

export type CreatePlatformConfigInstructionDataArgs = {
  migrateNftInfo: MigrateNftInfoArgs;
  feeRate: number | bigint;
  name: string;
  web: string;
  img: string;
};

export function getCreatePlatformConfigInstructionDataEncoder(): Encoder<CreatePlatformConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['migrateNftInfo', getMigrateNftInfoEncoder()],
      ['feeRate', getU64Encoder()],
      ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['web', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['img', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: CREATE_PLATFORM_CONFIG_DISCRIMINATOR,
    })
  );
}

export function getCreatePlatformConfigInstructionDataDecoder(): Decoder<CreatePlatformConfigInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['migrateNftInfo', getMigrateNftInfoDecoder()],
    ['feeRate', getU64Decoder()],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['web', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['img', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getCreatePlatformConfigInstructionDataCodec(): Codec<
  CreatePlatformConfigInstructionDataArgs,
  CreatePlatformConfigInstructionData
> {
  return combineCodec(
    getCreatePlatformConfigInstructionDataEncoder(),
    getCreatePlatformConfigInstructionDataDecoder()
  );
}

export type CreatePlatformConfigAsyncInput<
  TAccountPlatformAdmin extends string = string,
  TAccountPlatformFeeWallet extends string = string,
  TAccountPlatformNftWallet extends string = string,
  TAccountPlatformConfig extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** The account paying for the initialization costs */
  platformAdmin: TransactionSigner<TAccountPlatformAdmin>;
  platformFeeWallet: Address<TAccountPlatformFeeWallet>;
  platformNftWallet: Address<TAccountPlatformNftWallet>;
  /** The platform config account */
  platformConfig?: Address<TAccountPlatformConfig>;
  /** Required for account creation */
  systemProgram?: Address<TAccountSystemProgram>;
  migrateNftInfo: CreatePlatformConfigInstructionDataArgs['migrateNftInfo'];
  feeRate: CreatePlatformConfigInstructionDataArgs['feeRate'];
  name: CreatePlatformConfigInstructionDataArgs['name'];
  web: CreatePlatformConfigInstructionDataArgs['web'];
  img: CreatePlatformConfigInstructionDataArgs['img'];
};

export async function getCreatePlatformConfigInstructionAsync<
  TAccountPlatformAdmin extends string,
  TAccountPlatformFeeWallet extends string,
  TAccountPlatformNftWallet extends string,
  TAccountPlatformConfig extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
>(
  input: CreatePlatformConfigAsyncInput<
    TAccountPlatformAdmin,
    TAccountPlatformFeeWallet,
    TAccountPlatformNftWallet,
    TAccountPlatformConfig,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreatePlatformConfigInstruction<
    TProgramAddress,
    TAccountPlatformAdmin,
    TAccountPlatformFeeWallet,
    TAccountPlatformNftWallet,
    TAccountPlatformConfig,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    platformAdmin: { value: input.platformAdmin ?? null, isWritable: true },
    platformFeeWallet: {
      value: input.platformFeeWallet ?? null,
      isWritable: false,
    },
    platformNftWallet: {
      value: input.platformNftWallet ?? null,
      isWritable: false,
    },
    platformConfig: { value: input.platformConfig ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.platformConfig.value) {
    accounts.platformConfig.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            112, 108, 97, 116, 102, 111, 114, 109, 95, 99, 111, 110, 102, 105,
            103,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.platformAdmin.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.platformAdmin),
      getAccountMeta(accounts.platformFeeWallet),
      getAccountMeta(accounts.platformNftWallet),
      getAccountMeta(accounts.platformConfig),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreatePlatformConfigInstructionDataEncoder().encode(
      args as CreatePlatformConfigInstructionDataArgs
    ),
  } as CreatePlatformConfigInstruction<
    TProgramAddress,
    TAccountPlatformAdmin,
    TAccountPlatformFeeWallet,
    TAccountPlatformNftWallet,
    TAccountPlatformConfig,
    TAccountSystemProgram
  >;

  return instruction;
}

export type CreatePlatformConfigInput<
  TAccountPlatformAdmin extends string = string,
  TAccountPlatformFeeWallet extends string = string,
  TAccountPlatformNftWallet extends string = string,
  TAccountPlatformConfig extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** The account paying for the initialization costs */
  platformAdmin: TransactionSigner<TAccountPlatformAdmin>;
  platformFeeWallet: Address<TAccountPlatformFeeWallet>;
  platformNftWallet: Address<TAccountPlatformNftWallet>;
  /** The platform config account */
  platformConfig: Address<TAccountPlatformConfig>;
  /** Required for account creation */
  systemProgram?: Address<TAccountSystemProgram>;
  migrateNftInfo: CreatePlatformConfigInstructionDataArgs['migrateNftInfo'];
  feeRate: CreatePlatformConfigInstructionDataArgs['feeRate'];
  name: CreatePlatformConfigInstructionDataArgs['name'];
  web: CreatePlatformConfigInstructionDataArgs['web'];
  img: CreatePlatformConfigInstructionDataArgs['img'];
};

export function getCreatePlatformConfigInstruction<
  TAccountPlatformAdmin extends string,
  TAccountPlatformFeeWallet extends string,
  TAccountPlatformNftWallet extends string,
  TAccountPlatformConfig extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
>(
  input: CreatePlatformConfigInput<
    TAccountPlatformAdmin,
    TAccountPlatformFeeWallet,
    TAccountPlatformNftWallet,
    TAccountPlatformConfig,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreatePlatformConfigInstruction<
  TProgramAddress,
  TAccountPlatformAdmin,
  TAccountPlatformFeeWallet,
  TAccountPlatformNftWallet,
  TAccountPlatformConfig,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    platformAdmin: { value: input.platformAdmin ?? null, isWritable: true },
    platformFeeWallet: {
      value: input.platformFeeWallet ?? null,
      isWritable: false,
    },
    platformNftWallet: {
      value: input.platformNftWallet ?? null,
      isWritable: false,
    },
    platformConfig: { value: input.platformConfig ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.platformAdmin),
      getAccountMeta(accounts.platformFeeWallet),
      getAccountMeta(accounts.platformNftWallet),
      getAccountMeta(accounts.platformConfig),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreatePlatformConfigInstructionDataEncoder().encode(
      args as CreatePlatformConfigInstructionDataArgs
    ),
  } as CreatePlatformConfigInstruction<
    TProgramAddress,
    TAccountPlatformAdmin,
    TAccountPlatformFeeWallet,
    TAccountPlatformNftWallet,
    TAccountPlatformConfig,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedCreatePlatformConfigInstruction<
  TProgram extends string = typeof RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The account paying for the initialization costs */
    platformAdmin: TAccountMetas[0];
    platformFeeWallet: TAccountMetas[1];
    platformNftWallet: TAccountMetas[2];
    /** The platform config account */
    platformConfig: TAccountMetas[3];
    /** Required for account creation */
    systemProgram: TAccountMetas[4];
  };
  data: CreatePlatformConfigInstructionData;
};

export function parseCreatePlatformConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreatePlatformConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      platformAdmin: getNextAccount(),
      platformFeeWallet: getNextAccount(),
      platformNftWallet: getNextAccount(),
      platformConfig: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreatePlatformConfigInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
