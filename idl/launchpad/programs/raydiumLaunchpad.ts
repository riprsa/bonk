/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedBuyExactInInstruction,
  type ParsedBuyExactOutInstruction,
  type ParsedClaimPlatformFeeInstruction,
  type ParsedClaimVestedTokenInstruction,
  type ParsedCollectFeeInstruction,
  type ParsedCollectMigrateFeeInstruction,
  type ParsedCreateConfigInstruction,
  type ParsedCreatePlatformConfigInstruction,
  type ParsedCreateVestingAccountInstruction,
  type ParsedInitializeInstruction,
  type ParsedMigrateToAmmInstruction,
  type ParsedMigrateToCpswapInstruction,
  type ParsedSellExactInInstruction,
  type ParsedSellExactOutInstruction,
  type ParsedUpdateConfigInstruction,
  type ParsedUpdatePlatformConfigInstruction,
} from '../instructions';

export const RAYDIUM_LAUNCHPAD_PROGRAM_ADDRESS =
  'LanMV9sAd7wArD4vJFi2qDdfnVhFxYSUg6eADduJ3uj' as Address<'LanMV9sAd7wArD4vJFi2qDdfnVhFxYSUg6eADduJ3uj'>;

export enum RaydiumLaunchpadAccount {
  GlobalConfig,
  PlatformConfig,
  PoolState,
  VestingRecord,
}

export function identifyRaydiumLaunchpadAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): RaydiumLaunchpadAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([149, 8, 156, 202, 160, 252, 176, 217])
      ),
      0
    )
  ) {
    return RaydiumLaunchpadAccount.GlobalConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([160, 78, 128, 0, 248, 83, 230, 160])
      ),
      0
    )
  ) {
    return RaydiumLaunchpadAccount.PlatformConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([247, 237, 227, 245, 215, 195, 222, 70])
      ),
      0
    )
  ) {
    return RaydiumLaunchpadAccount.PoolState;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([106, 243, 221, 205, 230, 126, 85, 83])
      ),
      0
    )
  ) {
    return RaydiumLaunchpadAccount.VestingRecord;
  }
  throw new Error(
    'The provided account could not be identified as a raydiumLaunchpad account.'
  );
}

export enum RaydiumLaunchpadInstruction {
  BuyExactIn,
  BuyExactOut,
  ClaimPlatformFee,
  ClaimVestedToken,
  CollectFee,
  CollectMigrateFee,
  CreateConfig,
  CreatePlatformConfig,
  CreateVestingAccount,
  Initialize,
  MigrateToAmm,
  MigrateToCpswap,
  SellExactIn,
  SellExactOut,
  UpdateConfig,
  UpdatePlatformConfig,
}

export function identifyRaydiumLaunchpadInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): RaydiumLaunchpadInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([250, 234, 13, 123, 213, 156, 19, 236])
      ),
      0
    )
  ) {
    return RaydiumLaunchpadInstruction.BuyExactIn;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([24, 211, 116, 40, 105, 3, 153, 56])
      ),
      0
    )
  ) {
    return RaydiumLaunchpadInstruction.BuyExactOut;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([156, 39, 208, 135, 76, 237, 61, 72])
      ),
      0
    )
  ) {
    return RaydiumLaunchpadInstruction.ClaimPlatformFee;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([49, 33, 104, 30, 189, 157, 79, 35])
      ),
      0
    )
  ) {
    return RaydiumLaunchpadInstruction.ClaimVestedToken;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([60, 173, 247, 103, 4, 93, 130, 48])
      ),
      0
    )
  ) {
    return RaydiumLaunchpadInstruction.CollectFee;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([255, 186, 150, 223, 235, 118, 201, 186])
      ),
      0
    )
  ) {
    return RaydiumLaunchpadInstruction.CollectMigrateFee;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([201, 207, 243, 114, 75, 111, 47, 189])
      ),
      0
    )
  ) {
    return RaydiumLaunchpadInstruction.CreateConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([176, 90, 196, 175, 253, 113, 220, 20])
      ),
      0
    )
  ) {
    return RaydiumLaunchpadInstruction.CreatePlatformConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([129, 178, 2, 13, 217, 172, 230, 218])
      ),
      0
    )
  ) {
    return RaydiumLaunchpadInstruction.CreateVestingAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 175, 109, 31, 13, 152, 155, 237])
      ),
      0
    )
  ) {
    return RaydiumLaunchpadInstruction.Initialize;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([207, 82, 192, 145, 254, 207, 145, 223])
      ),
      0
    )
  ) {
    return RaydiumLaunchpadInstruction.MigrateToAmm;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([136, 92, 200, 103, 28, 218, 144, 140])
      ),
      0
    )
  ) {
    return RaydiumLaunchpadInstruction.MigrateToCpswap;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([149, 39, 222, 155, 211, 124, 152, 26])
      ),
      0
    )
  ) {
    return RaydiumLaunchpadInstruction.SellExactIn;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([95, 200, 71, 34, 8, 9, 11, 166])
      ),
      0
    )
  ) {
    return RaydiumLaunchpadInstruction.SellExactOut;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([29, 158, 252, 191, 10, 83, 219, 99])
      ),
      0
    )
  ) {
    return RaydiumLaunchpadInstruction.UpdateConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([195, 60, 76, 129, 146, 45, 67, 143])
      ),
      0
    )
  ) {
    return RaydiumLaunchpadInstruction.UpdatePlatformConfig;
  }
  throw new Error(
    'The provided instruction could not be identified as a raydiumLaunchpad instruction.'
  );
}

export type ParsedRaydiumLaunchpadInstruction<
  TProgram extends string = 'LanMV9sAd7wArD4vJFi2qDdfnVhFxYSUg6eADduJ3uj',
> =
  | ({
      instructionType: RaydiumLaunchpadInstruction.BuyExactIn;
    } & ParsedBuyExactInInstruction<TProgram>)
  | ({
      instructionType: RaydiumLaunchpadInstruction.BuyExactOut;
    } & ParsedBuyExactOutInstruction<TProgram>)
  | ({
      instructionType: RaydiumLaunchpadInstruction.ClaimPlatformFee;
    } & ParsedClaimPlatformFeeInstruction<TProgram>)
  | ({
      instructionType: RaydiumLaunchpadInstruction.ClaimVestedToken;
    } & ParsedClaimVestedTokenInstruction<TProgram>)
  | ({
      instructionType: RaydiumLaunchpadInstruction.CollectFee;
    } & ParsedCollectFeeInstruction<TProgram>)
  | ({
      instructionType: RaydiumLaunchpadInstruction.CollectMigrateFee;
    } & ParsedCollectMigrateFeeInstruction<TProgram>)
  | ({
      instructionType: RaydiumLaunchpadInstruction.CreateConfig;
    } & ParsedCreateConfigInstruction<TProgram>)
  | ({
      instructionType: RaydiumLaunchpadInstruction.CreatePlatformConfig;
    } & ParsedCreatePlatformConfigInstruction<TProgram>)
  | ({
      instructionType: RaydiumLaunchpadInstruction.CreateVestingAccount;
    } & ParsedCreateVestingAccountInstruction<TProgram>)
  | ({
      instructionType: RaydiumLaunchpadInstruction.Initialize;
    } & ParsedInitializeInstruction<TProgram>)
  | ({
      instructionType: RaydiumLaunchpadInstruction.MigrateToAmm;
    } & ParsedMigrateToAmmInstruction<TProgram>)
  | ({
      instructionType: RaydiumLaunchpadInstruction.MigrateToCpswap;
    } & ParsedMigrateToCpswapInstruction<TProgram>)
  | ({
      instructionType: RaydiumLaunchpadInstruction.SellExactIn;
    } & ParsedSellExactInInstruction<TProgram>)
  | ({
      instructionType: RaydiumLaunchpadInstruction.SellExactOut;
    } & ParsedSellExactOutInstruction<TProgram>)
  | ({
      instructionType: RaydiumLaunchpadInstruction.UpdateConfig;
    } & ParsedUpdateConfigInstruction<TProgram>)
  | ({
      instructionType: RaydiumLaunchpadInstruction.UpdatePlatformConfig;
    } & ParsedUpdatePlatformConfigInstruction<TProgram>);
